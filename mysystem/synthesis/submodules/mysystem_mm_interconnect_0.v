// mysystem_mm_interconnect_0.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 162 at 2015.01.22.17:37:43

`timescale 1 ps / 1 ps
module mysystem_mm_interconnect_0 (
		input  wire [11:0]  arm_a9_hps_h2f_axi_master_awid,                                        //                                       arm_a9_hps_h2f_axi_master.awid
		input  wire [29:0]  arm_a9_hps_h2f_axi_master_awaddr,                                      //                                                                .awaddr
		input  wire [3:0]   arm_a9_hps_h2f_axi_master_awlen,                                       //                                                                .awlen
		input  wire [2:0]   arm_a9_hps_h2f_axi_master_awsize,                                      //                                                                .awsize
		input  wire [1:0]   arm_a9_hps_h2f_axi_master_awburst,                                     //                                                                .awburst
		input  wire [1:0]   arm_a9_hps_h2f_axi_master_awlock,                                      //                                                                .awlock
		input  wire [3:0]   arm_a9_hps_h2f_axi_master_awcache,                                     //                                                                .awcache
		input  wire [2:0]   arm_a9_hps_h2f_axi_master_awprot,                                      //                                                                .awprot
		input  wire         arm_a9_hps_h2f_axi_master_awvalid,                                     //                                                                .awvalid
		output wire         arm_a9_hps_h2f_axi_master_awready,                                     //                                                                .awready
		input  wire [11:0]  arm_a9_hps_h2f_axi_master_wid,                                         //                                                                .wid
		input  wire [127:0] arm_a9_hps_h2f_axi_master_wdata,                                       //                                                                .wdata
		input  wire [15:0]  arm_a9_hps_h2f_axi_master_wstrb,                                       //                                                                .wstrb
		input  wire         arm_a9_hps_h2f_axi_master_wlast,                                       //                                                                .wlast
		input  wire         arm_a9_hps_h2f_axi_master_wvalid,                                      //                                                                .wvalid
		output wire         arm_a9_hps_h2f_axi_master_wready,                                      //                                                                .wready
		output wire [11:0]  arm_a9_hps_h2f_axi_master_bid,                                         //                                                                .bid
		output wire [1:0]   arm_a9_hps_h2f_axi_master_bresp,                                       //                                                                .bresp
		output wire         arm_a9_hps_h2f_axi_master_bvalid,                                      //                                                                .bvalid
		input  wire         arm_a9_hps_h2f_axi_master_bready,                                      //                                                                .bready
		input  wire [11:0]  arm_a9_hps_h2f_axi_master_arid,                                        //                                                                .arid
		input  wire [29:0]  arm_a9_hps_h2f_axi_master_araddr,                                      //                                                                .araddr
		input  wire [3:0]   arm_a9_hps_h2f_axi_master_arlen,                                       //                                                                .arlen
		input  wire [2:0]   arm_a9_hps_h2f_axi_master_arsize,                                      //                                                                .arsize
		input  wire [1:0]   arm_a9_hps_h2f_axi_master_arburst,                                     //                                                                .arburst
		input  wire [1:0]   arm_a9_hps_h2f_axi_master_arlock,                                      //                                                                .arlock
		input  wire [3:0]   arm_a9_hps_h2f_axi_master_arcache,                                     //                                                                .arcache
		input  wire [2:0]   arm_a9_hps_h2f_axi_master_arprot,                                      //                                                                .arprot
		input  wire         arm_a9_hps_h2f_axi_master_arvalid,                                     //                                                                .arvalid
		output wire         arm_a9_hps_h2f_axi_master_arready,                                     //                                                                .arready
		output wire [11:0]  arm_a9_hps_h2f_axi_master_rid,                                         //                                                                .rid
		output wire [127:0] arm_a9_hps_h2f_axi_master_rdata,                                       //                                                                .rdata
		output wire [1:0]   arm_a9_hps_h2f_axi_master_rresp,                                       //                                                                .rresp
		output wire         arm_a9_hps_h2f_axi_master_rlast,                                       //                                                                .rlast
		output wire         arm_a9_hps_h2f_axi_master_rvalid,                                      //                                                                .rvalid
		input  wire         arm_a9_hps_h2f_axi_master_rready,                                      //                                                                .rready
		input  wire         system_pll_sys_clk_clk,                                                //                                              system_pll_sys_clk.clk
		input  wire         arm_a9_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // arm_a9_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire         Onchip_SRAM_reset1_reset_bridge_in_reset_reset,                        //                        Onchip_SRAM_reset1_reset_bridge_in_reset.reset
		input  wire         vgasystem_0_sys_reset_reset_bridge_in_reset_reset,                     //                     vgasystem_0_sys_reset_reset_bridge_in_reset.reset
		input  wire [31:0]  vgasystem_0_pixel_dma_master_address,                                  //                                    vgasystem_0_pixel_dma_master.address
		output wire         vgasystem_0_pixel_dma_master_waitrequest,                              //                                                                .waitrequest
		input  wire         vgasystem_0_pixel_dma_master_read,                                     //                                                                .read
		output wire [15:0]  vgasystem_0_pixel_dma_master_readdata,                                 //                                                                .readdata
		output wire         vgasystem_0_pixel_dma_master_readdatavalid,                            //                                                                .readdatavalid
		input  wire         vgasystem_0_pixel_dma_master_lock,                                     //                                                                .lock
		output wire [11:0]  Onchip_SRAM_s1_address,                                                //                                                  Onchip_SRAM_s1.address
		output wire         Onchip_SRAM_s1_write,                                                  //                                                                .write
		input  wire [31:0]  Onchip_SRAM_s1_readdata,                                               //                                                                .readdata
		output wire [31:0]  Onchip_SRAM_s1_writedata,                                              //                                                                .writedata
		output wire [3:0]   Onchip_SRAM_s1_byteenable,                                             //                                                                .byteenable
		output wire         Onchip_SRAM_s1_chipselect,                                             //                                                                .chipselect
		output wire         Onchip_SRAM_s1_clken,                                                  //                                                                .clken
		output wire [11:0]  Onchip_SRAM_s2_address,                                                //                                                  Onchip_SRAM_s2.address
		output wire         Onchip_SRAM_s2_write,                                                  //                                                                .write
		input  wire [31:0]  Onchip_SRAM_s2_readdata,                                               //                                                                .readdata
		output wire [31:0]  Onchip_SRAM_s2_writedata,                                              //                                                                .writedata
		output wire [3:0]   Onchip_SRAM_s2_byteenable,                                             //                                                                .byteenable
		output wire         Onchip_SRAM_s2_chipselect,                                             //                                                                .chipselect
		output wire         Onchip_SRAM_s2_clken,                                                  //                                                                .clken
		output wire [24:0]  SDRAM_s1_address,                                                      //                                                        SDRAM_s1.address
		output wire         SDRAM_s1_write,                                                        //                                                                .write
		output wire         SDRAM_s1_read,                                                         //                                                                .read
		input  wire [15:0]  SDRAM_s1_readdata,                                                     //                                                                .readdata
		output wire [15:0]  SDRAM_s1_writedata,                                                    //                                                                .writedata
		output wire [1:0]   SDRAM_s1_byteenable,                                                   //                                                                .byteenable
		input  wire         SDRAM_s1_readdatavalid,                                                //                                                                .readdatavalid
		input  wire         SDRAM_s1_waitrequest,                                                  //                                                                .waitrequest
		output wire         SDRAM_s1_chipselect,                                                   //                                                                .chipselect
		output wire [12:0]  vgasystem_0_char_buffer_slave_address,                                 //                                   vgasystem_0_char_buffer_slave.address
		output wire         vgasystem_0_char_buffer_slave_write,                                   //                                                                .write
		output wire         vgasystem_0_char_buffer_slave_read,                                    //                                                                .read
		input  wire [7:0]   vgasystem_0_char_buffer_slave_readdata,                                //                                                                .readdata
		output wire [7:0]   vgasystem_0_char_buffer_slave_writedata,                               //                                                                .writedata
		output wire [0:0]   vgasystem_0_char_buffer_slave_byteenable,                              //                                                                .byteenable
		input  wire         vgasystem_0_char_buffer_slave_waitrequest,                             //                                                                .waitrequest
		output wire         vgasystem_0_char_buffer_slave_chipselect                               //                                                                .chipselect
	);

	wire          vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_waitrequest;                      // vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:av_waitrequest -> vgasystem_0_pixel_dma_master_translator:uav_waitrequest
	wire    [1:0] vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_burstcount;                       // vgasystem_0_pixel_dma_master_translator:uav_burstcount -> vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [15:0] vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_writedata;                        // vgasystem_0_pixel_dma_master_translator:uav_writedata -> vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_address;                          // vgasystem_0_pixel_dma_master_translator:uav_address -> vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:av_address
	wire          vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_lock;                             // vgasystem_0_pixel_dma_master_translator:uav_lock -> vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:av_lock
	wire          vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_write;                            // vgasystem_0_pixel_dma_master_translator:uav_write -> vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:av_write
	wire          vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_read;                             // vgasystem_0_pixel_dma_master_translator:uav_read -> vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:av_read
	wire   [15:0] vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_readdata;                         // vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:av_readdata -> vgasystem_0_pixel_dma_master_translator:uav_readdata
	wire          vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_debugaccess;                      // vgasystem_0_pixel_dma_master_translator:uav_debugaccess -> vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [1:0] vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_byteenable;                       // vgasystem_0_pixel_dma_master_translator:uav_byteenable -> vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire          vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid;                    // vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> vgasystem_0_pixel_dma_master_translator:uav_readdatavalid
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                            // Onchip_SRAM_s1_translator:uav_waitrequest -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                             // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> Onchip_SRAM_s1_translator:uav_burstcount
	wire   [31:0] onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                              // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> Onchip_SRAM_s1_translator:uav_writedata
	wire   [31:0] onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_address;                                // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:m0_address -> Onchip_SRAM_s1_translator:uav_address
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_write;                                  // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:m0_write -> Onchip_SRAM_s1_translator:uav_write
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                   // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:m0_lock -> Onchip_SRAM_s1_translator:uav_lock
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_read;                                   // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:m0_read -> Onchip_SRAM_s1_translator:uav_read
	wire   [31:0] onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                               // Onchip_SRAM_s1_translator:uav_readdata -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                          // Onchip_SRAM_s1_translator:uav_readdatavalid -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                            // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> Onchip_SRAM_s1_translator:uav_debugaccess
	wire    [3:0] onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                             // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> Onchip_SRAM_s1_translator:uav_byteenable
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                     // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                           // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                   // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [129:0] onchip_sram_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                            // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                           // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                  // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                        // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [129:0] onchip_sram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                         // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                        // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                      // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                       // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                      // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                      // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                       // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                      // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // vgasystem_0_char_buffer_slave_translator:uav_waitrequest -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [0:0] vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_burstcount;              // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:m0_burstcount -> vgasystem_0_char_buffer_slave_translator:uav_burstcount
	wire    [7:0] vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_writedata;               // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:m0_writedata -> vgasystem_0_char_buffer_slave_translator:uav_writedata
	wire   [31:0] vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_address;                 // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:m0_address -> vgasystem_0_char_buffer_slave_translator:uav_address
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_write;                   // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:m0_write -> vgasystem_0_char_buffer_slave_translator:uav_write
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_lock;                    // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:m0_lock -> vgasystem_0_char_buffer_slave_translator:uav_lock
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_read;                    // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:m0_read -> vgasystem_0_char_buffer_slave_translator:uav_read
	wire    [7:0] vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_readdata;                // vgasystem_0_char_buffer_slave_translator:uav_readdata -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // vgasystem_0_char_buffer_slave_translator:uav_readdatavalid -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:m0_debugaccess -> vgasystem_0_char_buffer_slave_translator:uav_debugaccess
	wire    [0:0] vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_byteenable;              // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:m0_byteenable -> vgasystem_0_char_buffer_slave_translator:uav_byteenable
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rf_source_valid;            // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rf_source_valid -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [102:0] vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rf_source_data;             // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rf_source_data -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rf_source_ready;            // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [102:0] vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rf_sink_ready -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire    [9:0] vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;       // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire    [9:0] vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;        // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;       // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                  // SDRAM_s1_translator:uav_waitrequest -> SDRAM_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [1:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                   // SDRAM_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> SDRAM_s1_translator:uav_burstcount
	wire   [15:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                    // SDRAM_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> SDRAM_s1_translator:uav_writedata
	wire   [31:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_address;                                      // SDRAM_s1_translator_avalon_universal_slave_0_agent:m0_address -> SDRAM_s1_translator:uav_address
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_m0_write;                                        // SDRAM_s1_translator_avalon_universal_slave_0_agent:m0_write -> SDRAM_s1_translator:uav_write
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                         // SDRAM_s1_translator_avalon_universal_slave_0_agent:m0_lock -> SDRAM_s1_translator:uav_lock
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_m0_read;                                         // SDRAM_s1_translator_avalon_universal_slave_0_agent:m0_read -> SDRAM_s1_translator:uav_read
	wire   [15:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                     // SDRAM_s1_translator:uav_readdata -> SDRAM_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                // SDRAM_s1_translator:uav_readdatavalid -> SDRAM_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                  // SDRAM_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> SDRAM_s1_translator:uav_debugaccess
	wire    [1:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                   // SDRAM_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> SDRAM_s1_translator:uav_byteenable
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                           // SDRAM_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> SDRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                 // SDRAM_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> SDRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                         // SDRAM_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> SDRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [111:0] sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                  // SDRAM_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> SDRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                 // SDRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> SDRAM_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                        // SDRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> SDRAM_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                              // SDRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> SDRAM_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                      // SDRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> SDRAM_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [111:0] sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                               // SDRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> SDRAM_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                              // SDRAM_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> SDRAM_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                            // SDRAM_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> SDRAM_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                             // SDRAM_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> SDRAM_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                            // SDRAM_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> SDRAM_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                            // SDRAM_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> SDRAM_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [17:0] sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                             // SDRAM_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> SDRAM_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                            // SDRAM_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> SDRAM_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_waitrequest;                            // Onchip_SRAM_s2_translator:uav_waitrequest -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_burstcount;                             // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:m0_burstcount -> Onchip_SRAM_s2_translator:uav_burstcount
	wire   [31:0] onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_writedata;                              // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:m0_writedata -> Onchip_SRAM_s2_translator:uav_writedata
	wire   [31:0] onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_address;                                // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:m0_address -> Onchip_SRAM_s2_translator:uav_address
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_write;                                  // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:m0_write -> Onchip_SRAM_s2_translator:uav_write
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_lock;                                   // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:m0_lock -> Onchip_SRAM_s2_translator:uav_lock
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_read;                                   // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:m0_read -> Onchip_SRAM_s2_translator:uav_read
	wire   [31:0] onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_readdata;                               // Onchip_SRAM_s2_translator:uav_readdata -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                          // Onchip_SRAM_s2_translator:uav_readdatavalid -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_debugaccess;                            // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:m0_debugaccess -> Onchip_SRAM_s2_translator:uav_debugaccess
	wire    [3:0] onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_byteenable;                             // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:m0_byteenable -> Onchip_SRAM_s2_translator:uav_byteenable
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                     // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_rf_source_valid;                           // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rf_source_valid -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                   // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [129:0] onchip_sram_s2_translator_avalon_universal_slave_0_agent_rf_source_data;                            // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rf_source_data -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_rf_source_ready;                           // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                  // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                        // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [129:0] onchip_sram_s2_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                         // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                        // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rf_sink_ready -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                      // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                       // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                      // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                      // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                       // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                      // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_endofpacket;                                               // arm_a9_hps_h2f_axi_master_agent:write_cp_endofpacket -> addr_router:sink_endofpacket
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_valid;                                                     // arm_a9_hps_h2f_axi_master_agent:write_cp_valid -> addr_router:sink_valid
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_startofpacket;                                             // arm_a9_hps_h2f_axi_master_agent:write_cp_startofpacket -> addr_router:sink_startofpacket
	wire  [236:0] arm_a9_hps_h2f_axi_master_agent_write_cp_data;                                                      // arm_a9_hps_h2f_axi_master_agent:write_cp_data -> addr_router:sink_data
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_ready;                                                     // addr_router:sink_ready -> arm_a9_hps_h2f_axi_master_agent:write_cp_ready
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_endofpacket;                                                // arm_a9_hps_h2f_axi_master_agent:read_cp_endofpacket -> addr_router_001:sink_endofpacket
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_valid;                                                      // arm_a9_hps_h2f_axi_master_agent:read_cp_valid -> addr_router_001:sink_valid
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_startofpacket;                                              // arm_a9_hps_h2f_axi_master_agent:read_cp_startofpacket -> addr_router_001:sink_startofpacket
	wire  [236:0] arm_a9_hps_h2f_axi_master_agent_read_cp_data;                                                       // arm_a9_hps_h2f_axi_master_agent:read_cp_data -> addr_router_001:sink_data
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_ready;                                                      // addr_router_001:sink_ready -> arm_a9_hps_h2f_axi_master_agent:read_cp_ready
	wire          vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent_cp_endofpacket;             // vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_002:sink_endofpacket
	wire          vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent_cp_valid;                   // vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_002:sink_valid
	wire          vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent_cp_startofpacket;           // vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_002:sink_startofpacket
	wire  [110:0] vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent_cp_data;                    // vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router_002:sink_data
	wire          vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent_cp_ready;                   // addr_router_002:sink_ready -> vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:cp_ready
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                            // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                  // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                          // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire  [128:0] onchip_sram_s1_translator_avalon_universal_slave_0_agent_rp_data;                                   // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire          onchip_sram_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                  // id_router:sink_ready -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_src_endofpacket;                                                                          // id_router:src_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire          id_router_src_valid;                                                                                // id_router:src_valid -> rsp_xbar_demux:sink_valid
	wire          id_router_src_startofpacket;                                                                        // id_router:src_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [128:0] id_router_src_data;                                                                                 // id_router:src_data -> rsp_xbar_demux:sink_data
	wire    [3:0] id_router_src_channel;                                                                              // id_router:src_channel -> rsp_xbar_demux:sink_channel
	wire          id_router_src_ready;                                                                                // rsp_xbar_demux:sink_ready -> id_router:src_ready
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_001:sink_endofpacket
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rp_valid;                   // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_001:sink_valid
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_001:sink_startofpacket
	wire  [101:0] vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rp_data;                    // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rp_data -> id_router_001:sink_data
	wire          vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router_001:sink_ready -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_001_src_endofpacket;                                                                      // id_router_001:src_endofpacket -> rsp_xbar_demux_001:sink_endofpacket
	wire          id_router_001_src_valid;                                                                            // id_router_001:src_valid -> rsp_xbar_demux_001:sink_valid
	wire          id_router_001_src_startofpacket;                                                                    // id_router_001:src_startofpacket -> rsp_xbar_demux_001:sink_startofpacket
	wire  [101:0] id_router_001_src_data;                                                                             // id_router_001:src_data -> rsp_xbar_demux_001:sink_data
	wire    [3:0] id_router_001_src_channel;                                                                          // id_router_001:src_channel -> rsp_xbar_demux_001:sink_channel
	wire          id_router_001_src_ready;                                                                            // rsp_xbar_demux_001:sink_ready -> id_router_001:src_ready
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                  // SDRAM_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_002:sink_endofpacket
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                        // SDRAM_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_002:sink_valid
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                // SDRAM_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_002:sink_startofpacket
	wire  [110:0] sdram_s1_translator_avalon_universal_slave_0_agent_rp_data;                                         // SDRAM_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_002:sink_data
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                        // id_router_002:sink_ready -> SDRAM_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_002_src_endofpacket;                                                                      // id_router_002:src_endofpacket -> rsp_xbar_demux_002:sink_endofpacket
	wire          id_router_002_src_valid;                                                                            // id_router_002:src_valid -> rsp_xbar_demux_002:sink_valid
	wire          id_router_002_src_startofpacket;                                                                    // id_router_002:src_startofpacket -> rsp_xbar_demux_002:sink_startofpacket
	wire  [110:0] id_router_002_src_data;                                                                             // id_router_002:src_data -> rsp_xbar_demux_002:sink_data
	wire    [3:0] id_router_002_src_channel;                                                                          // id_router_002:src_channel -> rsp_xbar_demux_002:sink_channel
	wire          id_router_002_src_ready;                                                                            // rsp_xbar_demux_002:sink_ready -> id_router_002:src_ready
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_rp_endofpacket;                            // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_003:sink_endofpacket
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_rp_valid;                                  // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_003:sink_valid
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_rp_startofpacket;                          // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_003:sink_startofpacket
	wire  [128:0] onchip_sram_s2_translator_avalon_universal_slave_0_agent_rp_data;                                   // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rp_data -> id_router_003:sink_data
	wire          onchip_sram_s2_translator_avalon_universal_slave_0_agent_rp_ready;                                  // id_router_003:sink_ready -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_003_src_endofpacket;                                                                      // id_router_003:src_endofpacket -> rsp_xbar_demux_003:sink_endofpacket
	wire          id_router_003_src_valid;                                                                            // id_router_003:src_valid -> rsp_xbar_demux_003:sink_valid
	wire          id_router_003_src_startofpacket;                                                                    // id_router_003:src_startofpacket -> rsp_xbar_demux_003:sink_startofpacket
	wire  [128:0] id_router_003_src_data;                                                                             // id_router_003:src_data -> rsp_xbar_demux_003:sink_data
	wire    [3:0] id_router_003_src_channel;                                                                          // id_router_003:src_channel -> rsp_xbar_demux_003:sink_channel
	wire          id_router_003_src_ready;                                                                            // rsp_xbar_demux_003:sink_ready -> id_router_003:src_ready
	wire          addr_router_src_endofpacket;                                                                        // addr_router:src_endofpacket -> limiter:cmd_sink_endofpacket
	wire          addr_router_src_valid;                                                                              // addr_router:src_valid -> limiter:cmd_sink_valid
	wire          addr_router_src_startofpacket;                                                                      // addr_router:src_startofpacket -> limiter:cmd_sink_startofpacket
	wire  [236:0] addr_router_src_data;                                                                               // addr_router:src_data -> limiter:cmd_sink_data
	wire    [3:0] addr_router_src_channel;                                                                            // addr_router:src_channel -> limiter:cmd_sink_channel
	wire          addr_router_src_ready;                                                                              // limiter:cmd_sink_ready -> addr_router:src_ready
	wire          limiter_cmd_src_endofpacket;                                                                        // limiter:cmd_src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire          limiter_cmd_src_startofpacket;                                                                      // limiter:cmd_src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [236:0] limiter_cmd_src_data;                                                                               // limiter:cmd_src_data -> cmd_xbar_demux:sink_data
	wire    [3:0] limiter_cmd_src_channel;                                                                            // limiter:cmd_src_channel -> cmd_xbar_demux:sink_channel
	wire          limiter_cmd_src_ready;                                                                              // cmd_xbar_demux:sink_ready -> limiter:cmd_src_ready
	wire          rsp_xbar_mux_src_endofpacket;                                                                       // rsp_xbar_mux:src_endofpacket -> limiter:rsp_sink_endofpacket
	wire          rsp_xbar_mux_src_valid;                                                                             // rsp_xbar_mux:src_valid -> limiter:rsp_sink_valid
	wire          rsp_xbar_mux_src_startofpacket;                                                                     // rsp_xbar_mux:src_startofpacket -> limiter:rsp_sink_startofpacket
	wire  [236:0] rsp_xbar_mux_src_data;                                                                              // rsp_xbar_mux:src_data -> limiter:rsp_sink_data
	wire    [3:0] rsp_xbar_mux_src_channel;                                                                           // rsp_xbar_mux:src_channel -> limiter:rsp_sink_channel
	wire          rsp_xbar_mux_src_ready;                                                                             // limiter:rsp_sink_ready -> rsp_xbar_mux:src_ready
	wire          limiter_rsp_src_endofpacket;                                                                        // limiter:rsp_src_endofpacket -> arm_a9_hps_h2f_axi_master_agent:write_rp_endofpacket
	wire          limiter_rsp_src_valid;                                                                              // limiter:rsp_src_valid -> arm_a9_hps_h2f_axi_master_agent:write_rp_valid
	wire          limiter_rsp_src_startofpacket;                                                                      // limiter:rsp_src_startofpacket -> arm_a9_hps_h2f_axi_master_agent:write_rp_startofpacket
	wire  [236:0] limiter_rsp_src_data;                                                                               // limiter:rsp_src_data -> arm_a9_hps_h2f_axi_master_agent:write_rp_data
	wire    [3:0] limiter_rsp_src_channel;                                                                            // limiter:rsp_src_channel -> arm_a9_hps_h2f_axi_master_agent:write_rp_channel
	wire          limiter_rsp_src_ready;                                                                              // arm_a9_hps_h2f_axi_master_agent:write_rp_ready -> limiter:rsp_src_ready
	wire          addr_router_001_src_endofpacket;                                                                    // addr_router_001:src_endofpacket -> limiter_001:cmd_sink_endofpacket
	wire          addr_router_001_src_valid;                                                                          // addr_router_001:src_valid -> limiter_001:cmd_sink_valid
	wire          addr_router_001_src_startofpacket;                                                                  // addr_router_001:src_startofpacket -> limiter_001:cmd_sink_startofpacket
	wire  [236:0] addr_router_001_src_data;                                                                           // addr_router_001:src_data -> limiter_001:cmd_sink_data
	wire    [3:0] addr_router_001_src_channel;                                                                        // addr_router_001:src_channel -> limiter_001:cmd_sink_channel
	wire          addr_router_001_src_ready;                                                                          // limiter_001:cmd_sink_ready -> addr_router_001:src_ready
	wire          limiter_001_cmd_src_endofpacket;                                                                    // limiter_001:cmd_src_endofpacket -> cmd_xbar_demux_001:sink_endofpacket
	wire          limiter_001_cmd_src_startofpacket;                                                                  // limiter_001:cmd_src_startofpacket -> cmd_xbar_demux_001:sink_startofpacket
	wire  [236:0] limiter_001_cmd_src_data;                                                                           // limiter_001:cmd_src_data -> cmd_xbar_demux_001:sink_data
	wire    [3:0] limiter_001_cmd_src_channel;                                                                        // limiter_001:cmd_src_channel -> cmd_xbar_demux_001:sink_channel
	wire          limiter_001_cmd_src_ready;                                                                          // cmd_xbar_demux_001:sink_ready -> limiter_001:cmd_src_ready
	wire          rsp_xbar_mux_001_src_endofpacket;                                                                   // rsp_xbar_mux_001:src_endofpacket -> limiter_001:rsp_sink_endofpacket
	wire          rsp_xbar_mux_001_src_valid;                                                                         // rsp_xbar_mux_001:src_valid -> limiter_001:rsp_sink_valid
	wire          rsp_xbar_mux_001_src_startofpacket;                                                                 // rsp_xbar_mux_001:src_startofpacket -> limiter_001:rsp_sink_startofpacket
	wire  [236:0] rsp_xbar_mux_001_src_data;                                                                          // rsp_xbar_mux_001:src_data -> limiter_001:rsp_sink_data
	wire    [3:0] rsp_xbar_mux_001_src_channel;                                                                       // rsp_xbar_mux_001:src_channel -> limiter_001:rsp_sink_channel
	wire          rsp_xbar_mux_001_src_ready;                                                                         // limiter_001:rsp_sink_ready -> rsp_xbar_mux_001:src_ready
	wire          limiter_001_rsp_src_endofpacket;                                                                    // limiter_001:rsp_src_endofpacket -> arm_a9_hps_h2f_axi_master_agent:read_rp_endofpacket
	wire          limiter_001_rsp_src_valid;                                                                          // limiter_001:rsp_src_valid -> arm_a9_hps_h2f_axi_master_agent:read_rp_valid
	wire          limiter_001_rsp_src_startofpacket;                                                                  // limiter_001:rsp_src_startofpacket -> arm_a9_hps_h2f_axi_master_agent:read_rp_startofpacket
	wire  [236:0] limiter_001_rsp_src_data;                                                                           // limiter_001:rsp_src_data -> arm_a9_hps_h2f_axi_master_agent:read_rp_data
	wire    [3:0] limiter_001_rsp_src_channel;                                                                        // limiter_001:rsp_src_channel -> arm_a9_hps_h2f_axi_master_agent:read_rp_channel
	wire          limiter_001_rsp_src_ready;                                                                          // arm_a9_hps_h2f_axi_master_agent:read_rp_ready -> limiter_001:rsp_src_ready
	wire          addr_router_002_src_endofpacket;                                                                    // addr_router_002:src_endofpacket -> limiter_002:cmd_sink_endofpacket
	wire          addr_router_002_src_valid;                                                                          // addr_router_002:src_valid -> limiter_002:cmd_sink_valid
	wire          addr_router_002_src_startofpacket;                                                                  // addr_router_002:src_startofpacket -> limiter_002:cmd_sink_startofpacket
	wire  [110:0] addr_router_002_src_data;                                                                           // addr_router_002:src_data -> limiter_002:cmd_sink_data
	wire    [3:0] addr_router_002_src_channel;                                                                        // addr_router_002:src_channel -> limiter_002:cmd_sink_channel
	wire          addr_router_002_src_ready;                                                                          // limiter_002:cmd_sink_ready -> addr_router_002:src_ready
	wire          limiter_002_cmd_src_endofpacket;                                                                    // limiter_002:cmd_src_endofpacket -> cmd_xbar_demux_002:sink_endofpacket
	wire          limiter_002_cmd_src_startofpacket;                                                                  // limiter_002:cmd_src_startofpacket -> cmd_xbar_demux_002:sink_startofpacket
	wire  [110:0] limiter_002_cmd_src_data;                                                                           // limiter_002:cmd_src_data -> cmd_xbar_demux_002:sink_data
	wire    [3:0] limiter_002_cmd_src_channel;                                                                        // limiter_002:cmd_src_channel -> cmd_xbar_demux_002:sink_channel
	wire          limiter_002_cmd_src_ready;                                                                          // cmd_xbar_demux_002:sink_ready -> limiter_002:cmd_src_ready
	wire          rsp_xbar_mux_002_src_endofpacket;                                                                   // rsp_xbar_mux_002:src_endofpacket -> limiter_002:rsp_sink_endofpacket
	wire          rsp_xbar_mux_002_src_valid;                                                                         // rsp_xbar_mux_002:src_valid -> limiter_002:rsp_sink_valid
	wire          rsp_xbar_mux_002_src_startofpacket;                                                                 // rsp_xbar_mux_002:src_startofpacket -> limiter_002:rsp_sink_startofpacket
	wire  [110:0] rsp_xbar_mux_002_src_data;                                                                          // rsp_xbar_mux_002:src_data -> limiter_002:rsp_sink_data
	wire    [3:0] rsp_xbar_mux_002_src_channel;                                                                       // rsp_xbar_mux_002:src_channel -> limiter_002:rsp_sink_channel
	wire          rsp_xbar_mux_002_src_ready;                                                                         // limiter_002:rsp_sink_ready -> rsp_xbar_mux_002:src_ready
	wire          limiter_002_rsp_src_endofpacket;                                                                    // limiter_002:rsp_src_endofpacket -> vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          limiter_002_rsp_src_valid;                                                                          // limiter_002:rsp_src_valid -> vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:rp_valid
	wire          limiter_002_rsp_src_startofpacket;                                                                  // limiter_002:rsp_src_startofpacket -> vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [110:0] limiter_002_rsp_src_data;                                                                           // limiter_002:rsp_src_data -> vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:rp_data
	wire    [3:0] limiter_002_rsp_src_channel;                                                                        // limiter_002:rsp_src_channel -> vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:rp_channel
	wire          limiter_002_rsp_src_ready;                                                                          // vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent:rp_ready -> limiter_002:rsp_src_ready
	wire          cmd_xbar_mux_src_endofpacket;                                                                       // cmd_xbar_mux:src_endofpacket -> burst_adapter:sink0_endofpacket
	wire          cmd_xbar_mux_src_valid;                                                                             // cmd_xbar_mux:src_valid -> burst_adapter:sink0_valid
	wire          cmd_xbar_mux_src_startofpacket;                                                                     // cmd_xbar_mux:src_startofpacket -> burst_adapter:sink0_startofpacket
	wire  [128:0] cmd_xbar_mux_src_data;                                                                              // cmd_xbar_mux:src_data -> burst_adapter:sink0_data
	wire    [3:0] cmd_xbar_mux_src_channel;                                                                           // cmd_xbar_mux:src_channel -> burst_adapter:sink0_channel
	wire          cmd_xbar_mux_src_ready;                                                                             // burst_adapter:sink0_ready -> cmd_xbar_mux:src_ready
	wire          burst_adapter_source0_endofpacket;                                                                  // burst_adapter:source0_endofpacket -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_source0_valid;                                                                        // burst_adapter:source0_valid -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_source0_startofpacket;                                                                // burst_adapter:source0_startofpacket -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [128:0] burst_adapter_source0_data;                                                                         // burst_adapter:source0_data -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_source0_ready;                                                                        // Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter:source0_ready
	wire    [3:0] burst_adapter_source0_channel;                                                                      // burst_adapter:source0_channel -> Onchip_SRAM_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_001_src_endofpacket;                                                                   // cmd_xbar_mux_001:src_endofpacket -> burst_adapter_001:sink0_endofpacket
	wire          cmd_xbar_mux_001_src_valid;                                                                         // cmd_xbar_mux_001:src_valid -> burst_adapter_001:sink0_valid
	wire          cmd_xbar_mux_001_src_startofpacket;                                                                 // cmd_xbar_mux_001:src_startofpacket -> burst_adapter_001:sink0_startofpacket
	wire  [101:0] cmd_xbar_mux_001_src_data;                                                                          // cmd_xbar_mux_001:src_data -> burst_adapter_001:sink0_data
	wire    [3:0] cmd_xbar_mux_001_src_channel;                                                                       // cmd_xbar_mux_001:src_channel -> burst_adapter_001:sink0_channel
	wire          cmd_xbar_mux_001_src_ready;                                                                         // burst_adapter_001:sink0_ready -> cmd_xbar_mux_001:src_ready
	wire          burst_adapter_001_source0_endofpacket;                                                              // burst_adapter_001:source0_endofpacket -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_001_source0_valid;                                                                    // burst_adapter_001:source0_valid -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_001_source0_startofpacket;                                                            // burst_adapter_001:source0_startofpacket -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [101:0] burst_adapter_001_source0_data;                                                                     // burst_adapter_001:source0_data -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_001_source0_ready;                                                                    // vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_001:source0_ready
	wire    [3:0] burst_adapter_001_source0_channel;                                                                  // burst_adapter_001:source0_channel -> vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_002_src_endofpacket;                                                                   // cmd_xbar_mux_002:src_endofpacket -> burst_adapter_002:sink0_endofpacket
	wire          cmd_xbar_mux_002_src_valid;                                                                         // cmd_xbar_mux_002:src_valid -> burst_adapter_002:sink0_valid
	wire          cmd_xbar_mux_002_src_startofpacket;                                                                 // cmd_xbar_mux_002:src_startofpacket -> burst_adapter_002:sink0_startofpacket
	wire  [110:0] cmd_xbar_mux_002_src_data;                                                                          // cmd_xbar_mux_002:src_data -> burst_adapter_002:sink0_data
	wire    [3:0] cmd_xbar_mux_002_src_channel;                                                                       // cmd_xbar_mux_002:src_channel -> burst_adapter_002:sink0_channel
	wire          cmd_xbar_mux_002_src_ready;                                                                         // burst_adapter_002:sink0_ready -> cmd_xbar_mux_002:src_ready
	wire          burst_adapter_002_source0_endofpacket;                                                              // burst_adapter_002:source0_endofpacket -> SDRAM_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_002_source0_valid;                                                                    // burst_adapter_002:source0_valid -> SDRAM_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_002_source0_startofpacket;                                                            // burst_adapter_002:source0_startofpacket -> SDRAM_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [110:0] burst_adapter_002_source0_data;                                                                     // burst_adapter_002:source0_data -> SDRAM_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_002_source0_ready;                                                                    // SDRAM_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_002:source0_ready
	wire    [3:0] burst_adapter_002_source0_channel;                                                                  // burst_adapter_002:source0_channel -> SDRAM_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_003_src_endofpacket;                                                                   // cmd_xbar_mux_003:src_endofpacket -> burst_adapter_003:sink0_endofpacket
	wire          cmd_xbar_mux_003_src_valid;                                                                         // cmd_xbar_mux_003:src_valid -> burst_adapter_003:sink0_valid
	wire          cmd_xbar_mux_003_src_startofpacket;                                                                 // cmd_xbar_mux_003:src_startofpacket -> burst_adapter_003:sink0_startofpacket
	wire  [128:0] cmd_xbar_mux_003_src_data;                                                                          // cmd_xbar_mux_003:src_data -> burst_adapter_003:sink0_data
	wire    [3:0] cmd_xbar_mux_003_src_channel;                                                                       // cmd_xbar_mux_003:src_channel -> burst_adapter_003:sink0_channel
	wire          cmd_xbar_mux_003_src_ready;                                                                         // burst_adapter_003:sink0_ready -> cmd_xbar_mux_003:src_ready
	wire          burst_adapter_003_source0_endofpacket;                                                              // burst_adapter_003:source0_endofpacket -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_003_source0_valid;                                                                    // burst_adapter_003:source0_valid -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_003_source0_startofpacket;                                                            // burst_adapter_003:source0_startofpacket -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [128:0] burst_adapter_003_source0_data;                                                                     // burst_adapter_003:source0_data -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_003_source0_ready;                                                                    // Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_003:source0_ready
	wire    [3:0] burst_adapter_003_source0_channel;                                                                  // burst_adapter_003:source0_channel -> Onchip_SRAM_s2_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_demux_002_src0_endofpacket;                                                                // cmd_xbar_demux_002:src0_endofpacket -> cmd_xbar_mux_002:sink2_endofpacket
	wire          cmd_xbar_demux_002_src0_valid;                                                                      // cmd_xbar_demux_002:src0_valid -> cmd_xbar_mux_002:sink2_valid
	wire          cmd_xbar_demux_002_src0_startofpacket;                                                              // cmd_xbar_demux_002:src0_startofpacket -> cmd_xbar_mux_002:sink2_startofpacket
	wire  [110:0] cmd_xbar_demux_002_src0_data;                                                                       // cmd_xbar_demux_002:src0_data -> cmd_xbar_mux_002:sink2_data
	wire    [3:0] cmd_xbar_demux_002_src0_channel;                                                                    // cmd_xbar_demux_002:src0_channel -> cmd_xbar_mux_002:sink2_channel
	wire          cmd_xbar_demux_002_src0_ready;                                                                      // cmd_xbar_mux_002:sink2_ready -> cmd_xbar_demux_002:src0_ready
	wire          rsp_xbar_demux_002_src2_endofpacket;                                                                // rsp_xbar_demux_002:src2_endofpacket -> rsp_xbar_mux_002:sink0_endofpacket
	wire          rsp_xbar_demux_002_src2_valid;                                                                      // rsp_xbar_demux_002:src2_valid -> rsp_xbar_mux_002:sink0_valid
	wire          rsp_xbar_demux_002_src2_startofpacket;                                                              // rsp_xbar_demux_002:src2_startofpacket -> rsp_xbar_mux_002:sink0_startofpacket
	wire  [110:0] rsp_xbar_demux_002_src2_data;                                                                       // rsp_xbar_demux_002:src2_data -> rsp_xbar_mux_002:sink0_data
	wire    [3:0] rsp_xbar_demux_002_src2_channel;                                                                    // rsp_xbar_demux_002:src2_channel -> rsp_xbar_mux_002:sink0_channel
	wire          rsp_xbar_demux_002_src2_ready;                                                                      // rsp_xbar_mux_002:sink0_ready -> rsp_xbar_demux_002:src2_ready
	wire          cmd_xbar_demux_src0_endofpacket;                                                                    // cmd_xbar_demux:src0_endofpacket -> width_adapter:in_endofpacket
	wire          cmd_xbar_demux_src0_valid;                                                                          // cmd_xbar_demux:src0_valid -> width_adapter:in_valid
	wire          cmd_xbar_demux_src0_startofpacket;                                                                  // cmd_xbar_demux:src0_startofpacket -> width_adapter:in_startofpacket
	wire  [236:0] cmd_xbar_demux_src0_data;                                                                           // cmd_xbar_demux:src0_data -> width_adapter:in_data
	wire    [3:0] cmd_xbar_demux_src0_channel;                                                                        // cmd_xbar_demux:src0_channel -> width_adapter:in_channel
	wire          cmd_xbar_demux_src0_ready;                                                                          // width_adapter:in_ready -> cmd_xbar_demux:src0_ready
	wire          width_adapter_src_endofpacket;                                                                      // width_adapter:out_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire          width_adapter_src_valid;                                                                            // width_adapter:out_valid -> cmd_xbar_mux:sink0_valid
	wire          width_adapter_src_startofpacket;                                                                    // width_adapter:out_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [128:0] width_adapter_src_data;                                                                             // width_adapter:out_data -> cmd_xbar_mux:sink0_data
	wire          width_adapter_src_ready;                                                                            // cmd_xbar_mux:sink0_ready -> width_adapter:out_ready
	wire    [3:0] width_adapter_src_channel;                                                                          // width_adapter:out_channel -> cmd_xbar_mux:sink0_channel
	wire          cmd_xbar_demux_src1_endofpacket;                                                                    // cmd_xbar_demux:src1_endofpacket -> width_adapter_001:in_endofpacket
	wire          cmd_xbar_demux_src1_valid;                                                                          // cmd_xbar_demux:src1_valid -> width_adapter_001:in_valid
	wire          cmd_xbar_demux_src1_startofpacket;                                                                  // cmd_xbar_demux:src1_startofpacket -> width_adapter_001:in_startofpacket
	wire  [236:0] cmd_xbar_demux_src1_data;                                                                           // cmd_xbar_demux:src1_data -> width_adapter_001:in_data
	wire    [3:0] cmd_xbar_demux_src1_channel;                                                                        // cmd_xbar_demux:src1_channel -> width_adapter_001:in_channel
	wire          cmd_xbar_demux_src1_ready;                                                                          // width_adapter_001:in_ready -> cmd_xbar_demux:src1_ready
	wire          width_adapter_001_src_endofpacket;                                                                  // width_adapter_001:out_endofpacket -> cmd_xbar_mux_001:sink0_endofpacket
	wire          width_adapter_001_src_valid;                                                                        // width_adapter_001:out_valid -> cmd_xbar_mux_001:sink0_valid
	wire          width_adapter_001_src_startofpacket;                                                                // width_adapter_001:out_startofpacket -> cmd_xbar_mux_001:sink0_startofpacket
	wire  [101:0] width_adapter_001_src_data;                                                                         // width_adapter_001:out_data -> cmd_xbar_mux_001:sink0_data
	wire          width_adapter_001_src_ready;                                                                        // cmd_xbar_mux_001:sink0_ready -> width_adapter_001:out_ready
	wire    [3:0] width_adapter_001_src_channel;                                                                      // width_adapter_001:out_channel -> cmd_xbar_mux_001:sink0_channel
	wire          cmd_xbar_demux_src2_endofpacket;                                                                    // cmd_xbar_demux:src2_endofpacket -> width_adapter_002:in_endofpacket
	wire          cmd_xbar_demux_src2_valid;                                                                          // cmd_xbar_demux:src2_valid -> width_adapter_002:in_valid
	wire          cmd_xbar_demux_src2_startofpacket;                                                                  // cmd_xbar_demux:src2_startofpacket -> width_adapter_002:in_startofpacket
	wire  [236:0] cmd_xbar_demux_src2_data;                                                                           // cmd_xbar_demux:src2_data -> width_adapter_002:in_data
	wire    [3:0] cmd_xbar_demux_src2_channel;                                                                        // cmd_xbar_demux:src2_channel -> width_adapter_002:in_channel
	wire          cmd_xbar_demux_src2_ready;                                                                          // width_adapter_002:in_ready -> cmd_xbar_demux:src2_ready
	wire          width_adapter_002_src_endofpacket;                                                                  // width_adapter_002:out_endofpacket -> cmd_xbar_mux_002:sink0_endofpacket
	wire          width_adapter_002_src_valid;                                                                        // width_adapter_002:out_valid -> cmd_xbar_mux_002:sink0_valid
	wire          width_adapter_002_src_startofpacket;                                                                // width_adapter_002:out_startofpacket -> cmd_xbar_mux_002:sink0_startofpacket
	wire  [110:0] width_adapter_002_src_data;                                                                         // width_adapter_002:out_data -> cmd_xbar_mux_002:sink0_data
	wire          width_adapter_002_src_ready;                                                                        // cmd_xbar_mux_002:sink0_ready -> width_adapter_002:out_ready
	wire    [3:0] width_adapter_002_src_channel;                                                                      // width_adapter_002:out_channel -> cmd_xbar_mux_002:sink0_channel
	wire          cmd_xbar_demux_001_src0_endofpacket;                                                                // cmd_xbar_demux_001:src0_endofpacket -> width_adapter_003:in_endofpacket
	wire          cmd_xbar_demux_001_src0_valid;                                                                      // cmd_xbar_demux_001:src0_valid -> width_adapter_003:in_valid
	wire          cmd_xbar_demux_001_src0_startofpacket;                                                              // cmd_xbar_demux_001:src0_startofpacket -> width_adapter_003:in_startofpacket
	wire  [236:0] cmd_xbar_demux_001_src0_data;                                                                       // cmd_xbar_demux_001:src0_data -> width_adapter_003:in_data
	wire    [3:0] cmd_xbar_demux_001_src0_channel;                                                                    // cmd_xbar_demux_001:src0_channel -> width_adapter_003:in_channel
	wire          cmd_xbar_demux_001_src0_ready;                                                                      // width_adapter_003:in_ready -> cmd_xbar_demux_001:src0_ready
	wire          width_adapter_003_src_endofpacket;                                                                  // width_adapter_003:out_endofpacket -> cmd_xbar_mux:sink1_endofpacket
	wire          width_adapter_003_src_valid;                                                                        // width_adapter_003:out_valid -> cmd_xbar_mux:sink1_valid
	wire          width_adapter_003_src_startofpacket;                                                                // width_adapter_003:out_startofpacket -> cmd_xbar_mux:sink1_startofpacket
	wire  [128:0] width_adapter_003_src_data;                                                                         // width_adapter_003:out_data -> cmd_xbar_mux:sink1_data
	wire          width_adapter_003_src_ready;                                                                        // cmd_xbar_mux:sink1_ready -> width_adapter_003:out_ready
	wire    [3:0] width_adapter_003_src_channel;                                                                      // width_adapter_003:out_channel -> cmd_xbar_mux:sink1_channel
	wire          cmd_xbar_demux_001_src1_endofpacket;                                                                // cmd_xbar_demux_001:src1_endofpacket -> width_adapter_004:in_endofpacket
	wire          cmd_xbar_demux_001_src1_valid;                                                                      // cmd_xbar_demux_001:src1_valid -> width_adapter_004:in_valid
	wire          cmd_xbar_demux_001_src1_startofpacket;                                                              // cmd_xbar_demux_001:src1_startofpacket -> width_adapter_004:in_startofpacket
	wire  [236:0] cmd_xbar_demux_001_src1_data;                                                                       // cmd_xbar_demux_001:src1_data -> width_adapter_004:in_data
	wire    [3:0] cmd_xbar_demux_001_src1_channel;                                                                    // cmd_xbar_demux_001:src1_channel -> width_adapter_004:in_channel
	wire          cmd_xbar_demux_001_src1_ready;                                                                      // width_adapter_004:in_ready -> cmd_xbar_demux_001:src1_ready
	wire          width_adapter_004_src_endofpacket;                                                                  // width_adapter_004:out_endofpacket -> cmd_xbar_mux_001:sink1_endofpacket
	wire          width_adapter_004_src_valid;                                                                        // width_adapter_004:out_valid -> cmd_xbar_mux_001:sink1_valid
	wire          width_adapter_004_src_startofpacket;                                                                // width_adapter_004:out_startofpacket -> cmd_xbar_mux_001:sink1_startofpacket
	wire  [101:0] width_adapter_004_src_data;                                                                         // width_adapter_004:out_data -> cmd_xbar_mux_001:sink1_data
	wire          width_adapter_004_src_ready;                                                                        // cmd_xbar_mux_001:sink1_ready -> width_adapter_004:out_ready
	wire    [3:0] width_adapter_004_src_channel;                                                                      // width_adapter_004:out_channel -> cmd_xbar_mux_001:sink1_channel
	wire          cmd_xbar_demux_001_src2_endofpacket;                                                                // cmd_xbar_demux_001:src2_endofpacket -> width_adapter_005:in_endofpacket
	wire          cmd_xbar_demux_001_src2_valid;                                                                      // cmd_xbar_demux_001:src2_valid -> width_adapter_005:in_valid
	wire          cmd_xbar_demux_001_src2_startofpacket;                                                              // cmd_xbar_demux_001:src2_startofpacket -> width_adapter_005:in_startofpacket
	wire  [236:0] cmd_xbar_demux_001_src2_data;                                                                       // cmd_xbar_demux_001:src2_data -> width_adapter_005:in_data
	wire    [3:0] cmd_xbar_demux_001_src2_channel;                                                                    // cmd_xbar_demux_001:src2_channel -> width_adapter_005:in_channel
	wire          cmd_xbar_demux_001_src2_ready;                                                                      // width_adapter_005:in_ready -> cmd_xbar_demux_001:src2_ready
	wire          width_adapter_005_src_endofpacket;                                                                  // width_adapter_005:out_endofpacket -> cmd_xbar_mux_002:sink1_endofpacket
	wire          width_adapter_005_src_valid;                                                                        // width_adapter_005:out_valid -> cmd_xbar_mux_002:sink1_valid
	wire          width_adapter_005_src_startofpacket;                                                                // width_adapter_005:out_startofpacket -> cmd_xbar_mux_002:sink1_startofpacket
	wire  [110:0] width_adapter_005_src_data;                                                                         // width_adapter_005:out_data -> cmd_xbar_mux_002:sink1_data
	wire          width_adapter_005_src_ready;                                                                        // cmd_xbar_mux_002:sink1_ready -> width_adapter_005:out_ready
	wire    [3:0] width_adapter_005_src_channel;                                                                      // width_adapter_005:out_channel -> cmd_xbar_mux_002:sink1_channel
	wire          cmd_xbar_demux_002_src1_endofpacket;                                                                // cmd_xbar_demux_002:src1_endofpacket -> width_adapter_006:in_endofpacket
	wire          cmd_xbar_demux_002_src1_valid;                                                                      // cmd_xbar_demux_002:src1_valid -> width_adapter_006:in_valid
	wire          cmd_xbar_demux_002_src1_startofpacket;                                                              // cmd_xbar_demux_002:src1_startofpacket -> width_adapter_006:in_startofpacket
	wire  [110:0] cmd_xbar_demux_002_src1_data;                                                                       // cmd_xbar_demux_002:src1_data -> width_adapter_006:in_data
	wire    [3:0] cmd_xbar_demux_002_src1_channel;                                                                    // cmd_xbar_demux_002:src1_channel -> width_adapter_006:in_channel
	wire          cmd_xbar_demux_002_src1_ready;                                                                      // width_adapter_006:in_ready -> cmd_xbar_demux_002:src1_ready
	wire          width_adapter_006_src_endofpacket;                                                                  // width_adapter_006:out_endofpacket -> cmd_xbar_mux_003:sink0_endofpacket
	wire          width_adapter_006_src_valid;                                                                        // width_adapter_006:out_valid -> cmd_xbar_mux_003:sink0_valid
	wire          width_adapter_006_src_startofpacket;                                                                // width_adapter_006:out_startofpacket -> cmd_xbar_mux_003:sink0_startofpacket
	wire  [128:0] width_adapter_006_src_data;                                                                         // width_adapter_006:out_data -> cmd_xbar_mux_003:sink0_data
	wire          width_adapter_006_src_ready;                                                                        // cmd_xbar_mux_003:sink0_ready -> width_adapter_006:out_ready
	wire    [3:0] width_adapter_006_src_channel;                                                                      // width_adapter_006:out_channel -> cmd_xbar_mux_003:sink0_channel
	wire          rsp_xbar_demux_src0_endofpacket;                                                                    // rsp_xbar_demux:src0_endofpacket -> width_adapter_007:in_endofpacket
	wire          rsp_xbar_demux_src0_valid;                                                                          // rsp_xbar_demux:src0_valid -> width_adapter_007:in_valid
	wire          rsp_xbar_demux_src0_startofpacket;                                                                  // rsp_xbar_demux:src0_startofpacket -> width_adapter_007:in_startofpacket
	wire  [128:0] rsp_xbar_demux_src0_data;                                                                           // rsp_xbar_demux:src0_data -> width_adapter_007:in_data
	wire    [3:0] rsp_xbar_demux_src0_channel;                                                                        // rsp_xbar_demux:src0_channel -> width_adapter_007:in_channel
	wire          rsp_xbar_demux_src0_ready;                                                                          // width_adapter_007:in_ready -> rsp_xbar_demux:src0_ready
	wire          width_adapter_007_src_endofpacket;                                                                  // width_adapter_007:out_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire          width_adapter_007_src_valid;                                                                        // width_adapter_007:out_valid -> rsp_xbar_mux:sink0_valid
	wire          width_adapter_007_src_startofpacket;                                                                // width_adapter_007:out_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [236:0] width_adapter_007_src_data;                                                                         // width_adapter_007:out_data -> rsp_xbar_mux:sink0_data
	wire          width_adapter_007_src_ready;                                                                        // rsp_xbar_mux:sink0_ready -> width_adapter_007:out_ready
	wire    [3:0] width_adapter_007_src_channel;                                                                      // width_adapter_007:out_channel -> rsp_xbar_mux:sink0_channel
	wire          rsp_xbar_demux_src1_endofpacket;                                                                    // rsp_xbar_demux:src1_endofpacket -> width_adapter_008:in_endofpacket
	wire          rsp_xbar_demux_src1_valid;                                                                          // rsp_xbar_demux:src1_valid -> width_adapter_008:in_valid
	wire          rsp_xbar_demux_src1_startofpacket;                                                                  // rsp_xbar_demux:src1_startofpacket -> width_adapter_008:in_startofpacket
	wire  [128:0] rsp_xbar_demux_src1_data;                                                                           // rsp_xbar_demux:src1_data -> width_adapter_008:in_data
	wire    [3:0] rsp_xbar_demux_src1_channel;                                                                        // rsp_xbar_demux:src1_channel -> width_adapter_008:in_channel
	wire          rsp_xbar_demux_src1_ready;                                                                          // width_adapter_008:in_ready -> rsp_xbar_demux:src1_ready
	wire          width_adapter_008_src_endofpacket;                                                                  // width_adapter_008:out_endofpacket -> rsp_xbar_mux_001:sink0_endofpacket
	wire          width_adapter_008_src_valid;                                                                        // width_adapter_008:out_valid -> rsp_xbar_mux_001:sink0_valid
	wire          width_adapter_008_src_startofpacket;                                                                // width_adapter_008:out_startofpacket -> rsp_xbar_mux_001:sink0_startofpacket
	wire  [236:0] width_adapter_008_src_data;                                                                         // width_adapter_008:out_data -> rsp_xbar_mux_001:sink0_data
	wire          width_adapter_008_src_ready;                                                                        // rsp_xbar_mux_001:sink0_ready -> width_adapter_008:out_ready
	wire    [3:0] width_adapter_008_src_channel;                                                                      // width_adapter_008:out_channel -> rsp_xbar_mux_001:sink0_channel
	wire          rsp_xbar_demux_001_src0_endofpacket;                                                                // rsp_xbar_demux_001:src0_endofpacket -> width_adapter_009:in_endofpacket
	wire          rsp_xbar_demux_001_src0_valid;                                                                      // rsp_xbar_demux_001:src0_valid -> width_adapter_009:in_valid
	wire          rsp_xbar_demux_001_src0_startofpacket;                                                              // rsp_xbar_demux_001:src0_startofpacket -> width_adapter_009:in_startofpacket
	wire  [101:0] rsp_xbar_demux_001_src0_data;                                                                       // rsp_xbar_demux_001:src0_data -> width_adapter_009:in_data
	wire    [3:0] rsp_xbar_demux_001_src0_channel;                                                                    // rsp_xbar_demux_001:src0_channel -> width_adapter_009:in_channel
	wire          rsp_xbar_demux_001_src0_ready;                                                                      // width_adapter_009:in_ready -> rsp_xbar_demux_001:src0_ready
	wire          width_adapter_009_src_endofpacket;                                                                  // width_adapter_009:out_endofpacket -> rsp_xbar_mux:sink1_endofpacket
	wire          width_adapter_009_src_valid;                                                                        // width_adapter_009:out_valid -> rsp_xbar_mux:sink1_valid
	wire          width_adapter_009_src_startofpacket;                                                                // width_adapter_009:out_startofpacket -> rsp_xbar_mux:sink1_startofpacket
	wire  [236:0] width_adapter_009_src_data;                                                                         // width_adapter_009:out_data -> rsp_xbar_mux:sink1_data
	wire          width_adapter_009_src_ready;                                                                        // rsp_xbar_mux:sink1_ready -> width_adapter_009:out_ready
	wire    [3:0] width_adapter_009_src_channel;                                                                      // width_adapter_009:out_channel -> rsp_xbar_mux:sink1_channel
	wire          rsp_xbar_demux_001_src1_endofpacket;                                                                // rsp_xbar_demux_001:src1_endofpacket -> width_adapter_010:in_endofpacket
	wire          rsp_xbar_demux_001_src1_valid;                                                                      // rsp_xbar_demux_001:src1_valid -> width_adapter_010:in_valid
	wire          rsp_xbar_demux_001_src1_startofpacket;                                                              // rsp_xbar_demux_001:src1_startofpacket -> width_adapter_010:in_startofpacket
	wire  [101:0] rsp_xbar_demux_001_src1_data;                                                                       // rsp_xbar_demux_001:src1_data -> width_adapter_010:in_data
	wire    [3:0] rsp_xbar_demux_001_src1_channel;                                                                    // rsp_xbar_demux_001:src1_channel -> width_adapter_010:in_channel
	wire          rsp_xbar_demux_001_src1_ready;                                                                      // width_adapter_010:in_ready -> rsp_xbar_demux_001:src1_ready
	wire          width_adapter_010_src_endofpacket;                                                                  // width_adapter_010:out_endofpacket -> rsp_xbar_mux_001:sink1_endofpacket
	wire          width_adapter_010_src_valid;                                                                        // width_adapter_010:out_valid -> rsp_xbar_mux_001:sink1_valid
	wire          width_adapter_010_src_startofpacket;                                                                // width_adapter_010:out_startofpacket -> rsp_xbar_mux_001:sink1_startofpacket
	wire  [236:0] width_adapter_010_src_data;                                                                         // width_adapter_010:out_data -> rsp_xbar_mux_001:sink1_data
	wire          width_adapter_010_src_ready;                                                                        // rsp_xbar_mux_001:sink1_ready -> width_adapter_010:out_ready
	wire    [3:0] width_adapter_010_src_channel;                                                                      // width_adapter_010:out_channel -> rsp_xbar_mux_001:sink1_channel
	wire          rsp_xbar_demux_002_src0_endofpacket;                                                                // rsp_xbar_demux_002:src0_endofpacket -> width_adapter_011:in_endofpacket
	wire          rsp_xbar_demux_002_src0_valid;                                                                      // rsp_xbar_demux_002:src0_valid -> width_adapter_011:in_valid
	wire          rsp_xbar_demux_002_src0_startofpacket;                                                              // rsp_xbar_demux_002:src0_startofpacket -> width_adapter_011:in_startofpacket
	wire  [110:0] rsp_xbar_demux_002_src0_data;                                                                       // rsp_xbar_demux_002:src0_data -> width_adapter_011:in_data
	wire    [3:0] rsp_xbar_demux_002_src0_channel;                                                                    // rsp_xbar_demux_002:src0_channel -> width_adapter_011:in_channel
	wire          rsp_xbar_demux_002_src0_ready;                                                                      // width_adapter_011:in_ready -> rsp_xbar_demux_002:src0_ready
	wire          width_adapter_011_src_endofpacket;                                                                  // width_adapter_011:out_endofpacket -> rsp_xbar_mux:sink2_endofpacket
	wire          width_adapter_011_src_valid;                                                                        // width_adapter_011:out_valid -> rsp_xbar_mux:sink2_valid
	wire          width_adapter_011_src_startofpacket;                                                                // width_adapter_011:out_startofpacket -> rsp_xbar_mux:sink2_startofpacket
	wire  [236:0] width_adapter_011_src_data;                                                                         // width_adapter_011:out_data -> rsp_xbar_mux:sink2_data
	wire          width_adapter_011_src_ready;                                                                        // rsp_xbar_mux:sink2_ready -> width_adapter_011:out_ready
	wire    [3:0] width_adapter_011_src_channel;                                                                      // width_adapter_011:out_channel -> rsp_xbar_mux:sink2_channel
	wire          rsp_xbar_demux_002_src1_endofpacket;                                                                // rsp_xbar_demux_002:src1_endofpacket -> width_adapter_012:in_endofpacket
	wire          rsp_xbar_demux_002_src1_valid;                                                                      // rsp_xbar_demux_002:src1_valid -> width_adapter_012:in_valid
	wire          rsp_xbar_demux_002_src1_startofpacket;                                                              // rsp_xbar_demux_002:src1_startofpacket -> width_adapter_012:in_startofpacket
	wire  [110:0] rsp_xbar_demux_002_src1_data;                                                                       // rsp_xbar_demux_002:src1_data -> width_adapter_012:in_data
	wire    [3:0] rsp_xbar_demux_002_src1_channel;                                                                    // rsp_xbar_demux_002:src1_channel -> width_adapter_012:in_channel
	wire          rsp_xbar_demux_002_src1_ready;                                                                      // width_adapter_012:in_ready -> rsp_xbar_demux_002:src1_ready
	wire          width_adapter_012_src_endofpacket;                                                                  // width_adapter_012:out_endofpacket -> rsp_xbar_mux_001:sink2_endofpacket
	wire          width_adapter_012_src_valid;                                                                        // width_adapter_012:out_valid -> rsp_xbar_mux_001:sink2_valid
	wire          width_adapter_012_src_startofpacket;                                                                // width_adapter_012:out_startofpacket -> rsp_xbar_mux_001:sink2_startofpacket
	wire  [236:0] width_adapter_012_src_data;                                                                         // width_adapter_012:out_data -> rsp_xbar_mux_001:sink2_data
	wire          width_adapter_012_src_ready;                                                                        // rsp_xbar_mux_001:sink2_ready -> width_adapter_012:out_ready
	wire    [3:0] width_adapter_012_src_channel;                                                                      // width_adapter_012:out_channel -> rsp_xbar_mux_001:sink2_channel
	wire          rsp_xbar_demux_003_src0_endofpacket;                                                                // rsp_xbar_demux_003:src0_endofpacket -> width_adapter_013:in_endofpacket
	wire          rsp_xbar_demux_003_src0_valid;                                                                      // rsp_xbar_demux_003:src0_valid -> width_adapter_013:in_valid
	wire          rsp_xbar_demux_003_src0_startofpacket;                                                              // rsp_xbar_demux_003:src0_startofpacket -> width_adapter_013:in_startofpacket
	wire  [128:0] rsp_xbar_demux_003_src0_data;                                                                       // rsp_xbar_demux_003:src0_data -> width_adapter_013:in_data
	wire    [3:0] rsp_xbar_demux_003_src0_channel;                                                                    // rsp_xbar_demux_003:src0_channel -> width_adapter_013:in_channel
	wire          rsp_xbar_demux_003_src0_ready;                                                                      // width_adapter_013:in_ready -> rsp_xbar_demux_003:src0_ready
	wire          width_adapter_013_src_endofpacket;                                                                  // width_adapter_013:out_endofpacket -> rsp_xbar_mux_002:sink1_endofpacket
	wire          width_adapter_013_src_valid;                                                                        // width_adapter_013:out_valid -> rsp_xbar_mux_002:sink1_valid
	wire          width_adapter_013_src_startofpacket;                                                                // width_adapter_013:out_startofpacket -> rsp_xbar_mux_002:sink1_startofpacket
	wire  [110:0] width_adapter_013_src_data;                                                                         // width_adapter_013:out_data -> rsp_xbar_mux_002:sink1_data
	wire          width_adapter_013_src_ready;                                                                        // rsp_xbar_mux_002:sink1_ready -> width_adapter_013:out_ready
	wire    [3:0] width_adapter_013_src_channel;                                                                      // width_adapter_013:out_channel -> rsp_xbar_mux_002:sink1_channel
	wire    [3:0] limiter_cmd_valid_data;                                                                             // limiter:cmd_src_valid -> cmd_xbar_demux:sink_valid
	wire    [3:0] limiter_001_cmd_valid_data;                                                                         // limiter_001:cmd_src_valid -> cmd_xbar_demux_001:sink_valid
	wire    [3:0] limiter_002_cmd_valid_data;                                                                         // limiter_002:cmd_src_valid -> cmd_xbar_demux_002:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) vgasystem_0_pixel_dma_master_translator (
		.clk                      (system_pll_sys_clk_clk),                                                          //                       clk.clk
		.reset                    (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                  //                     reset.reset
		.uav_address              (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (vgasystem_0_pixel_dma_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (vgasystem_0_pixel_dma_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (vgasystem_0_pixel_dma_master_read),                                               //                          .read
		.av_readdata              (vgasystem_0_pixel_dma_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (vgasystem_0_pixel_dma_master_readdatavalid),                                      //                          .readdatavalid
		.av_lock                  (vgasystem_0_pixel_dma_master_lock),                                               //                          .lock
		.av_burstcount            (1'b1),                                                                            //               (terminated)
		.av_byteenable            (2'b11),                                                                           //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                            //               (terminated)
		.av_begintransfer         (1'b0),                                                                            //               (terminated)
		.av_chipselect            (1'b0),                                                                            //               (terminated)
		.av_write                 (1'b0),                                                                            //               (terminated)
		.av_writedata             (16'b0000000000000000),                                                            //               (terminated)
		.av_debugaccess           (1'b0),                                                                            //               (terminated)
		.uav_clken                (),                                                                                //               (terminated)
		.av_clken                 (1'b1),                                                                            //               (terminated)
		.uav_response             (2'b00),                                                                           //               (terminated)
		.av_response              (),                                                                                //               (terminated)
		.uav_writeresponserequest (),                                                                                //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                            //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid    ()                                                                                 //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_sram_s1_translator (
		.clk                      (system_pll_sys_clk_clk),                                                    //                      clk.clk
		.reset                    (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                            //                    reset.reset
		.uav_address              (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (Onchip_SRAM_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (Onchip_SRAM_s1_write),                                                      //                         .write
		.av_readdata              (Onchip_SRAM_s1_readdata),                                                   //                         .readdata
		.av_writedata             (Onchip_SRAM_s1_writedata),                                                  //                         .writedata
		.av_byteenable            (Onchip_SRAM_s1_byteenable),                                                 //                         .byteenable
		.av_chipselect            (Onchip_SRAM_s1_chipselect),                                                 //                         .chipselect
		.av_clken                 (Onchip_SRAM_s1_clken),                                                      //                         .clken
		.av_read                  (),                                                                          //              (terminated)
		.av_begintransfer         (),                                                                          //              (terminated)
		.av_beginbursttransfer    (),                                                                          //              (terminated)
		.av_burstcount            (),                                                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                                                      //              (terminated)
		.av_waitrequest           (1'b0),                                                                      //              (terminated)
		.av_writebyteenable       (),                                                                          //              (terminated)
		.av_lock                  (),                                                                          //              (terminated)
		.uav_clken                (1'b0),                                                                      //              (terminated)
		.av_debugaccess           (),                                                                          //              (terminated)
		.av_outputenable          (),                                                                          //              (terminated)
		.uav_response             (),                                                                          //              (terminated)
		.av_response              (2'b00),                                                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                      //              (terminated)
		.uav_writeresponsevalid   (),                                                                          //              (terminated)
		.av_writeresponserequest  (),                                                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vgasystem_0_char_buffer_slave_translator (
		.clk                      (system_pll_sys_clk_clk),                                                                   //                      clk.clk
		.reset                    (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                           //                    reset.reset
		.uav_address              (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (vgasystem_0_char_buffer_slave_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (vgasystem_0_char_buffer_slave_write),                                                      //                         .write
		.av_read                  (vgasystem_0_char_buffer_slave_read),                                                       //                         .read
		.av_readdata              (vgasystem_0_char_buffer_slave_readdata),                                                   //                         .readdata
		.av_writedata             (vgasystem_0_char_buffer_slave_writedata),                                                  //                         .writedata
		.av_byteenable            (vgasystem_0_char_buffer_slave_byteenable),                                                 //                         .byteenable
		.av_waitrequest           (vgasystem_0_char_buffer_slave_waitrequest),                                                //                         .waitrequest
		.av_chipselect            (vgasystem_0_char_buffer_slave_chipselect),                                                 //                         .chipselect
		.av_begintransfer         (),                                                                                         //              (terminated)
		.av_beginbursttransfer    (),                                                                                         //              (terminated)
		.av_burstcount            (),                                                                                         //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                     //              (terminated)
		.av_writebyteenable       (),                                                                                         //              (terminated)
		.av_lock                  (),                                                                                         //              (terminated)
		.av_clken                 (),                                                                                         //              (terminated)
		.uav_clken                (1'b0),                                                                                     //              (terminated)
		.av_debugaccess           (),                                                                                         //              (terminated)
		.av_outputenable          (),                                                                                         //              (terminated)
		.uav_response             (),                                                                                         //              (terminated)
		.av_response              (2'b00),                                                                                    //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                     //              (terminated)
		.uav_writeresponsevalid   (),                                                                                         //              (terminated)
		.av_writeresponserequest  (),                                                                                         //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                      (system_pll_sys_clk_clk),                                              //                      clk.clk
		.reset                    (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                      //                    reset.reset
		.uav_address              (sdram_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (sdram_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sdram_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (SDRAM_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (SDRAM_s1_write),                                                      //                         .write
		.av_read                  (SDRAM_s1_read),                                                       //                         .read
		.av_readdata              (SDRAM_s1_readdata),                                                   //                         .readdata
		.av_writedata             (SDRAM_s1_writedata),                                                  //                         .writedata
		.av_byteenable            (SDRAM_s1_byteenable),                                                 //                         .byteenable
		.av_readdatavalid         (SDRAM_s1_readdatavalid),                                              //                         .readdatavalid
		.av_waitrequest           (SDRAM_s1_waitrequest),                                                //                         .waitrequest
		.av_chipselect            (SDRAM_s1_chipselect),                                                 //                         .chipselect
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_sram_s2_translator (
		.clk                      (system_pll_sys_clk_clk),                                                    //                      clk.clk
		.reset                    (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                            //                    reset.reset
		.uav_address              (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (Onchip_SRAM_s2_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (Onchip_SRAM_s2_write),                                                      //                         .write
		.av_readdata              (Onchip_SRAM_s2_readdata),                                                   //                         .readdata
		.av_writedata             (Onchip_SRAM_s2_writedata),                                                  //                         .writedata
		.av_byteenable            (Onchip_SRAM_s2_byteenable),                                                 //                         .byteenable
		.av_chipselect            (Onchip_SRAM_s2_chipselect),                                                 //                         .chipselect
		.av_clken                 (Onchip_SRAM_s2_clken),                                                      //                         .clken
		.av_read                  (),                                                                          //              (terminated)
		.av_begintransfer         (),                                                                          //              (terminated)
		.av_beginbursttransfer    (),                                                                          //              (terminated)
		.av_burstcount            (),                                                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                                                      //              (terminated)
		.av_waitrequest           (1'b0),                                                                      //              (terminated)
		.av_writebyteenable       (),                                                                          //              (terminated)
		.av_lock                  (),                                                                          //              (terminated)
		.uav_clken                (1'b0),                                                                      //              (terminated)
		.av_debugaccess           (),                                                                          //              (terminated)
		.av_outputenable          (),                                                                          //              (terminated)
		.uav_response             (),                                                                          //              (terminated)
		.av_response              (2'b00),                                                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                      //              (terminated)
		.uav_writeresponsevalid   (),                                                                          //              (terminated)
		.av_writeresponserequest  (),                                                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                       //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (128),
		.WDATA_WIDTH               (128),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (207),
		.PKT_CACHE_H               (231),
		.PKT_CACHE_L               (228),
		.PKT_ADDR_SIDEBAND_H       (205),
		.PKT_ADDR_SIDEBAND_L       (205),
		.PKT_PROTECTION_H          (227),
		.PKT_PROTECTION_L          (225),
		.PKT_BURST_SIZE_H          (202),
		.PKT_BURST_SIZE_L          (200),
		.PKT_BURST_TYPE_H          (204),
		.PKT_BURST_TYPE_L          (203),
		.PKT_RESPONSE_STATUS_L     (232),
		.PKT_RESPONSE_STATUS_H     (233),
		.PKT_BURSTWRAP_H           (199),
		.PKT_BURSTWRAP_L           (191),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_EXCLUSIVE       (181),
		.PKT_TRANS_LOCK            (180),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (210),
		.PKT_SRC_ID_L              (209),
		.PKT_DEST_ID_H             (212),
		.PKT_DEST_ID_L             (211),
		.PKT_THREAD_ID_H           (224),
		.PKT_THREAD_ID_L           (213),
		.PKT_QOS_L                 (208),
		.PKT_QOS_H                 (208),
		.PKT_ORI_BURST_SIZE_L      (234),
		.PKT_ORI_BURST_SIZE_H      (236),
		.PKT_DATA_SIDEBAND_H       (206),
		.PKT_DATA_SIDEBAND_L       (206),
		.ST_DATA_W                 (237),
		.ST_CHANNEL_W              (4),
		.ID                        (0)
	) arm_a9_hps_h2f_axi_master_agent (
		.aclk                   (system_pll_sys_clk_clk),                                                 //              clk.clk
		.aresetn                (~arm_a9_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (arm_a9_hps_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (arm_a9_hps_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (arm_a9_hps_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (arm_a9_hps_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (arm_a9_hps_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (limiter_rsp_src_valid),                                                  //         write_rp.valid
		.write_rp_data          (limiter_rsp_src_data),                                                   //                 .data
		.write_rp_channel       (limiter_rsp_src_channel),                                                //                 .channel
		.write_rp_startofpacket (limiter_rsp_src_startofpacket),                                          //                 .startofpacket
		.write_rp_endofpacket   (limiter_rsp_src_endofpacket),                                            //                 .endofpacket
		.write_rp_ready         (limiter_rsp_src_ready),                                                  //                 .ready
		.read_cp_valid          (arm_a9_hps_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (arm_a9_hps_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (arm_a9_hps_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (arm_a9_hps_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (arm_a9_hps_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (limiter_001_rsp_src_valid),                                              //          read_rp.valid
		.read_rp_data           (limiter_001_rsp_src_data),                                               //                 .data
		.read_rp_channel        (limiter_001_rsp_src_channel),                                            //                 .channel
		.read_rp_startofpacket  (limiter_001_rsp_src_startofpacket),                                      //                 .startofpacket
		.read_rp_endofpacket    (limiter_001_rsp_src_endofpacket),                                        //                 .endofpacket
		.read_rp_ready          (limiter_001_rsp_src_ready),                                              //                 .ready
		.awid                   (arm_a9_hps_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (arm_a9_hps_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (arm_a9_hps_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (arm_a9_hps_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (arm_a9_hps_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (arm_a9_hps_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (arm_a9_hps_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (arm_a9_hps_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (arm_a9_hps_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (arm_a9_hps_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (arm_a9_hps_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (arm_a9_hps_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (arm_a9_hps_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (arm_a9_hps_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (arm_a9_hps_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (arm_a9_hps_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (arm_a9_hps_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (arm_a9_hps_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (arm_a9_hps_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (arm_a9_hps_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (arm_a9_hps_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (arm_a9_hps_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (arm_a9_hps_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (arm_a9_hps_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (arm_a9_hps_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (arm_a9_hps_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (arm_a9_hps_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (arm_a9_hps_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (arm_a9_hps_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (arm_a9_hps_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (arm_a9_hps_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (arm_a9_hps_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (arm_a9_hps_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (arm_a9_hps_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (arm_a9_hps_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (arm_a9_hps_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                   //      (terminated)
		.aruser                 (1'b0),                                                                   //      (terminated)
		.awqos                  (4'b0000),                                                                //      (terminated)
		.arqos                  (4'b0000),                                                                //      (terminated)
		.awregion               (4'b0000),                                                                //      (terminated)
		.arregion               (4'b0000),                                                                //      (terminated)
		.wuser                  (8'b00000000),                                                            //      (terminated)
		.ruser                  (),                                                                       //      (terminated)
		.buser                  ()                                                                        //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (101),
		.PKT_PROTECTION_L          (99),
		.PKT_BEGIN_BURST           (81),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (84),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (85),
		.PKT_THREAD_ID_H           (98),
		.PKT_THREAD_ID_L           (87),
		.PKT_CACHE_H               (105),
		.PKT_CACHE_L               (102),
		.PKT_DATA_SIDEBAND_H       (80),
		.PKT_DATA_SIDEBAND_L       (80),
		.PKT_QOS_H                 (82),
		.PKT_QOS_L                 (82),
		.PKT_ADDR_SIDEBAND_H       (79),
		.PKT_ADDR_SIDEBAND_L       (79),
		.PKT_RESPONSE_STATUS_H     (107),
		.PKT_RESPONSE_STATUS_L     (106),
		.PKT_ORI_BURST_SIZE_L      (108),
		.PKT_ORI_BURST_SIZE_H      (110),
		.ST_DATA_W                 (111),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (2),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent (
		.clk                     (system_pll_sys_clk_clk),                                                                   //       clk.clk
		.reset                   (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.av_address              (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (limiter_002_rsp_src_valid),                                                                //        rp.valid
		.rp_data                 (limiter_002_rsp_src_data),                                                                 //          .data
		.rp_channel              (limiter_002_rsp_src_channel),                                                              //          .channel
		.rp_startofpacket        (limiter_002_rsp_src_startofpacket),                                                        //          .startofpacket
		.rp_endofpacket          (limiter_002_rsp_src_endofpacket),                                                          //          .endofpacket
		.rp_ready                (limiter_002_rsp_src_ready),                                                                //          .ready
		.av_response             (),                                                                                         // (terminated)
		.av_writeresponserequest (1'b0),                                                                                     // (terminated)
		.av_writeresponsevalid   ()                                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (99),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_ORI_BURST_SIZE_H      (128),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) onchip_sram_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (system_pll_sys_clk_clk),                                                              //             clk.clk
		.reset                   (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                      //       clk_reset.reset
		.m0_address              (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_sram_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_source0_ready),                                                         //              cp.ready
		.cp_valid                (burst_adapter_source0_valid),                                                         //                .valid
		.cp_data                 (burst_adapter_source0_data),                                                          //                .data
		.cp_startofpacket        (burst_adapter_source0_startofpacket),                                                 //                .startofpacket
		.cp_endofpacket          (burst_adapter_source0_endofpacket),                                                   //                .endofpacket
		.cp_channel              (burst_adapter_source0_channel),                                                       //                .channel
		.rf_sink_ready           (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                               //     (terminated)
		.m0_writeresponserequest (),                                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_sram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (system_pll_sys_clk_clk),                                                              //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.in_data           (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                               // (terminated)
		.csr_read          (1'b0),                                                                                // (terminated)
		.csr_write         (1'b0),                                                                                // (terminated)
		.csr_readdata      (),                                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                // (terminated)
		.almost_full_data  (),                                                                                    // (terminated)
		.almost_empty_data (),                                                                                    // (terminated)
		.in_empty          (1'b0),                                                                                // (terminated)
		.out_empty         (),                                                                                    // (terminated)
		.in_error          (1'b0),                                                                                // (terminated)
		.out_error         (),                                                                                    // (terminated)
		.in_channel        (1'b0),                                                                                // (terminated)
		.out_channel       ()                                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (system_pll_sys_clk_clk),                                                        //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_data           (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_startofpacket  (1'b0),                                                                          // (terminated)
		.in_endofpacket    (1'b0),                                                                          // (terminated)
		.out_startofpacket (),                                                                              // (terminated)
		.out_endofpacket   (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (72),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (77),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (47),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_ORI_BURST_SIZE_H      (101),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent (
		.clk                     (system_pll_sys_clk_clk),                                                                             //             clk.clk
		.reset                   (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                                     //       clk_reset.reset
		.m0_address              (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_001_source0_ready),                                                                    //              cp.ready
		.cp_valid                (burst_adapter_001_source0_valid),                                                                    //                .valid
		.cp_data                 (burst_adapter_001_source0_data),                                                                     //                .data
		.cp_startofpacket        (burst_adapter_001_source0_startofpacket),                                                            //                .startofpacket
		.cp_endofpacket          (burst_adapter_001_source0_endofpacket),                                                              //                .endofpacket
		.cp_channel              (burst_adapter_001_source0_channel),                                                                  //                .channel
		.rf_sink_ready           (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                              //     (terminated)
		.m0_writeresponserequest (),                                                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (system_pll_sys_clk_clk),                                                                             //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                                     // clk_reset.reset
		.in_data           (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                              // (terminated)
		.csr_read          (1'b0),                                                                                               // (terminated)
		.csr_write         (1'b0),                                                                                               // (terminated)
		.csr_readdata      (),                                                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                               // (terminated)
		.almost_full_data  (),                                                                                                   // (terminated)
		.almost_empty_data (),                                                                                                   // (terminated)
		.in_empty          (1'b0),                                                                                               // (terminated)
		.out_empty         (),                                                                                                   // (terminated)
		.in_error          (1'b0),                                                                                               // (terminated)
		.out_error         (),                                                                                                   // (terminated)
		.in_channel        (1'b0),                                                                                               // (terminated)
		.out_channel       ()                                                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (system_pll_sys_clk_clk),                                                                       //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                               // clk_reset.reset
		.in_data           (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                        // (terminated)
		.csr_read          (1'b0),                                                                                         // (terminated)
		.csr_write         (1'b0),                                                                                         // (terminated)
		.csr_readdata      (),                                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                         // (terminated)
		.almost_full_data  (),                                                                                             // (terminated)
		.almost_empty_data (),                                                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                                                         // (terminated)
		.out_startofpacket (),                                                                                             // (terminated)
		.out_endofpacket   (),                                                                                             // (terminated)
		.in_empty          (1'b0),                                                                                         // (terminated)
		.out_empty         (),                                                                                             // (terminated)
		.in_error          (1'b0),                                                                                         // (terminated)
		.out_error         (),                                                                                             // (terminated)
		.in_channel        (1'b0),                                                                                         // (terminated)
		.out_channel       ()                                                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (81),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (84),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (85),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (101),
		.PKT_PROTECTION_L          (99),
		.PKT_RESPONSE_STATUS_H     (107),
		.PKT_RESPONSE_STATUS_L     (106),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_ORI_BURST_SIZE_L      (108),
		.PKT_ORI_BURST_SIZE_H      (110),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (111),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (system_pll_sys_clk_clk),                                                        //             clk.clk
		.reset                   (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                //       clk_reset.reset
		.m0_address              (sdram_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_002_source0_ready),                                               //              cp.ready
		.cp_valid                (burst_adapter_002_source0_valid),                                               //                .valid
		.cp_data                 (burst_adapter_002_source0_data),                                                //                .data
		.cp_startofpacket        (burst_adapter_002_source0_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (burst_adapter_002_source0_endofpacket),                                         //                .endofpacket
		.cp_channel              (burst_adapter_002_source0_channel),                                             //                .channel
		.rf_sink_ready           (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (112),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (system_pll_sys_clk_clk),                                                        //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_data           (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (system_pll_sys_clk_clk),                                                  //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                                    // (terminated)
		.out_startofpacket (),                                                                        // (terminated)
		.out_endofpacket   (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (99),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_ORI_BURST_SIZE_H      (128),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (129),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) onchip_sram_s2_translator_avalon_universal_slave_0_agent (
		.clk                     (system_pll_sys_clk_clk),                                                              //             clk.clk
		.reset                   (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                      //       clk_reset.reset
		.m0_address              (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_sram_s2_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_003_source0_ready),                                                     //              cp.ready
		.cp_valid                (burst_adapter_003_source0_valid),                                                     //                .valid
		.cp_data                 (burst_adapter_003_source0_data),                                                      //                .data
		.cp_startofpacket        (burst_adapter_003_source0_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (burst_adapter_003_source0_endofpacket),                                               //                .endofpacket
		.cp_channel              (burst_adapter_003_source0_channel),                                                   //                .channel
		.rf_sink_ready           (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                               //     (terminated)
		.m0_writeresponserequest (),                                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_sram_s2_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (system_pll_sys_clk_clk),                                                              //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.in_data           (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                               // (terminated)
		.csr_read          (1'b0),                                                                                // (terminated)
		.csr_write         (1'b0),                                                                                // (terminated)
		.csr_readdata      (),                                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                // (terminated)
		.almost_full_data  (),                                                                                    // (terminated)
		.almost_empty_data (),                                                                                    // (terminated)
		.in_empty          (1'b0),                                                                                // (terminated)
		.out_empty         (),                                                                                    // (terminated)
		.in_error          (1'b0),                                                                                // (terminated)
		.out_error         (),                                                                                    // (terminated)
		.in_channel        (1'b0),                                                                                // (terminated)
		.out_channel       ()                                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (system_pll_sys_clk_clk),                                                        //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_data           (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_startofpacket  (1'b0),                                                                          // (terminated)
		.in_endofpacket    (1'b0),                                                                          // (terminated)
		.out_startofpacket (),                                                                              // (terminated)
		.out_endofpacket   (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	mysystem_mm_interconnect_0_addr_router addr_router (
		.sink_ready         (arm_a9_hps_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (arm_a9_hps_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (system_pll_sys_clk_clk),                                                //       clk.clk
		.reset              (arm_a9_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                                 //       src.ready
		.src_valid          (addr_router_src_valid),                                                 //          .valid
		.src_data           (addr_router_src_data),                                                  //          .data
		.src_channel        (addr_router_src_channel),                                               //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                            //          .endofpacket
	);

	mysystem_mm_interconnect_0_addr_router addr_router_001 (
		.sink_ready         (arm_a9_hps_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (arm_a9_hps_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (system_pll_sys_clk_clk),                                                //       clk.clk
		.reset              (arm_a9_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (addr_router_001_src_ready),                                             //       src.ready
		.src_valid          (addr_router_001_src_valid),                                             //          .valid
		.src_data           (addr_router_001_src_data),                                              //          .data
		.src_channel        (addr_router_001_src_channel),                                           //          .channel
		.src_startofpacket  (addr_router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (addr_router_001_src_endofpacket)                                        //          .endofpacket
	);

	mysystem_mm_interconnect_0_addr_router_002 addr_router_002 (
		.sink_ready         (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vgasystem_0_pixel_dma_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (system_pll_sys_clk_clk),                                                                   //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.src_ready          (addr_router_002_src_ready),                                                                //       src.ready
		.src_valid          (addr_router_002_src_valid),                                                                //          .valid
		.src_data           (addr_router_002_src_data),                                                                 //          .data
		.src_channel        (addr_router_002_src_channel),                                                              //          .channel
		.src_startofpacket  (addr_router_002_src_startofpacket),                                                        //          .startofpacket
		.src_endofpacket    (addr_router_002_src_endofpacket)                                                           //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router id_router (
		.sink_ready         (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_sram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (system_pll_sys_clk_clk),                                                    //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.src_ready          (id_router_src_ready),                                                       //       src.ready
		.src_valid          (id_router_src_valid),                                                       //          .valid
		.src_data           (id_router_src_data),                                                        //          .data
		.src_channel        (id_router_src_channel),                                                     //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                               //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                                  //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router_001 id_router_001 (
		.sink_ready         (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vgasystem_0_char_buffer_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (system_pll_sys_clk_clk),                                                                   //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.src_ready          (id_router_001_src_ready),                                                                  //       src.ready
		.src_valid          (id_router_001_src_valid),                                                                  //          .valid
		.src_data           (id_router_001_src_data),                                                                   //          .data
		.src_channel        (id_router_001_src_channel),                                                                //          .channel
		.src_startofpacket  (id_router_001_src_startofpacket),                                                          //          .startofpacket
		.src_endofpacket    (id_router_001_src_endofpacket)                                                             //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router_002 id_router_002 (
		.sink_ready         (sdram_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sdram_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sdram_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sdram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (system_pll_sys_clk_clk),                                              //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready          (id_router_002_src_ready),                                             //       src.ready
		.src_valid          (id_router_002_src_valid),                                             //          .valid
		.src_data           (id_router_002_src_data),                                              //          .data
		.src_channel        (id_router_002_src_channel),                                           //          .channel
		.src_startofpacket  (id_router_002_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (id_router_002_src_endofpacket)                                        //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router_003 id_router_003 (
		.sink_ready         (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_sram_s2_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (system_pll_sys_clk_clk),                                                    //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.src_ready          (id_router_003_src_ready),                                                   //       src.ready
		.src_valid          (id_router_003_src_valid),                                                   //          .valid
		.src_data           (id_router_003_src_data),                                                    //          .data
		.src_channel        (id_router_003_src_channel),                                                 //          .channel
		.src_startofpacket  (id_router_003_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket    (id_router_003_src_endofpacket)                                              //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (212),
		.PKT_DEST_ID_L             (211),
		.PKT_SRC_ID_H              (210),
		.PKT_SRC_ID_L              (209),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (237),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.REORDER                   (0)
	) limiter (
		.clk                    (system_pll_sys_clk_clk),                                                //       clk.clk
		.reset                  (arm_a9_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_src_ready),                                                 //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_src_valid),                                                 //          .valid
		.cmd_sink_data          (addr_router_src_data),                                                  //          .data
		.cmd_sink_channel       (addr_router_src_channel),                                               //          .channel
		.cmd_sink_startofpacket (addr_router_src_startofpacket),                                         //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_src_endofpacket),                                           //          .endofpacket
		.cmd_src_ready          (limiter_cmd_src_ready),                                                 //   cmd_src.ready
		.cmd_src_data           (limiter_cmd_src_data),                                                  //          .data
		.cmd_src_channel        (limiter_cmd_src_channel),                                               //          .channel
		.cmd_src_startofpacket  (limiter_cmd_src_startofpacket),                                         //          .startofpacket
		.cmd_src_endofpacket    (limiter_cmd_src_endofpacket),                                           //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_src_ready),                                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_src_valid),                                                //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_src_channel),                                              //          .channel
		.rsp_sink_data          (rsp_xbar_mux_src_data),                                                 //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_src_startofpacket),                                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_src_endofpacket),                                          //          .endofpacket
		.rsp_src_ready          (limiter_rsp_src_ready),                                                 //   rsp_src.ready
		.rsp_src_valid          (limiter_rsp_src_valid),                                                 //          .valid
		.rsp_src_data           (limiter_rsp_src_data),                                                  //          .data
		.rsp_src_channel        (limiter_rsp_src_channel),                                               //          .channel
		.rsp_src_startofpacket  (limiter_rsp_src_startofpacket),                                         //          .startofpacket
		.rsp_src_endofpacket    (limiter_rsp_src_endofpacket),                                           //          .endofpacket
		.cmd_src_valid          (limiter_cmd_valid_data)                                                 // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (212),
		.PKT_DEST_ID_L             (211),
		.PKT_SRC_ID_H              (210),
		.PKT_SRC_ID_L              (209),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (237),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.REORDER                   (0)
	) limiter_001 (
		.clk                    (system_pll_sys_clk_clk),                                                //       clk.clk
		.reset                  (arm_a9_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_001_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_001_src_valid),                                             //          .valid
		.cmd_sink_data          (addr_router_001_src_data),                                              //          .data
		.cmd_sink_channel       (addr_router_001_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (addr_router_001_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_001_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (limiter_001_cmd_src_ready),                                             //   cmd_src.ready
		.cmd_src_data           (limiter_001_cmd_src_data),                                              //          .data
		.cmd_src_channel        (limiter_001_cmd_src_channel),                                           //          .channel
		.cmd_src_startofpacket  (limiter_001_cmd_src_startofpacket),                                     //          .startofpacket
		.cmd_src_endofpacket    (limiter_001_cmd_src_endofpacket),                                       //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_001_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_001_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_001_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_xbar_mux_001_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_001_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_001_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (limiter_001_rsp_src_ready),                                             //   rsp_src.ready
		.rsp_src_valid          (limiter_001_rsp_src_valid),                                             //          .valid
		.rsp_src_data           (limiter_001_rsp_src_data),                                              //          .data
		.rsp_src_channel        (limiter_001_rsp_src_channel),                                           //          .channel
		.rsp_src_startofpacket  (limiter_001_rsp_src_startofpacket),                                     //          .startofpacket
		.rsp_src_endofpacket    (limiter_001_rsp_src_endofpacket),                                       //          .endofpacket
		.cmd_src_valid          (limiter_001_cmd_valid_data)                                             // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (85),
		.PKT_SRC_ID_H              (84),
		.PKT_SRC_ID_L              (83),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (111),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.REORDER                   (0)
	) limiter_002 (
		.clk                    (system_pll_sys_clk_clk),                         //       clk.clk
		.reset                  (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_002_src_ready),                      //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_002_src_valid),                      //          .valid
		.cmd_sink_data          (addr_router_002_src_data),                       //          .data
		.cmd_sink_channel       (addr_router_002_src_channel),                    //          .channel
		.cmd_sink_startofpacket (addr_router_002_src_startofpacket),              //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_002_src_endofpacket),                //          .endofpacket
		.cmd_src_ready          (limiter_002_cmd_src_ready),                      //   cmd_src.ready
		.cmd_src_data           (limiter_002_cmd_src_data),                       //          .data
		.cmd_src_channel        (limiter_002_cmd_src_channel),                    //          .channel
		.cmd_src_startofpacket  (limiter_002_cmd_src_startofpacket),              //          .startofpacket
		.cmd_src_endofpacket    (limiter_002_cmd_src_endofpacket),                //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_002_src_ready),                     //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_002_src_valid),                     //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_002_src_channel),                   //          .channel
		.rsp_sink_data          (rsp_xbar_mux_002_src_data),                      //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_002_src_startofpacket),             //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_002_src_endofpacket),               //          .endofpacket
		.rsp_src_ready          (limiter_002_rsp_src_ready),                      //   rsp_src.ready
		.rsp_src_valid          (limiter_002_rsp_src_valid),                      //          .valid
		.rsp_src_data           (limiter_002_rsp_src_data),                       //          .data
		.rsp_src_channel        (limiter_002_rsp_src_channel),                    //          .channel
		.rsp_src_startofpacket  (limiter_002_rsp_src_startofpacket),              //          .startofpacket
		.rsp_src_endofpacket    (limiter_002_rsp_src_endofpacket),                //          .endofpacket
		.cmd_src_valid          (limiter_002_cmd_valid_data)                      // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter (
		.clk                   (system_pll_sys_clk_clk),                         //       cr0.clk
		.reset                 (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_src_valid),                         //     sink0.valid
		.sink0_data            (cmd_xbar_mux_src_data),                          //          .data
		.sink0_channel         (cmd_xbar_mux_src_channel),                       //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_src_ready),                         //          .ready
		.source0_valid         (burst_adapter_source0_valid),                    //   source0.valid
		.source0_data          (burst_adapter_source0_data),                     //          .data
		.source0_channel       (burst_adapter_source0_channel),                  //          .channel
		.source0_startofpacket (burst_adapter_source0_startofpacket),            //          .startofpacket
		.source0_endofpacket   (burst_adapter_source0_endofpacket),              //          .endofpacket
		.source0_ready         (burst_adapter_source0_ready)                     //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (72),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_BURST_TYPE_H          (69),
		.PKT_BURST_TYPE_L          (68),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (56),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (102),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (64),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_001 (
		.clk                   (system_pll_sys_clk_clk),                         //       cr0.clk
		.reset                 (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_001_src_valid),                     //     sink0.valid
		.sink0_data            (cmd_xbar_mux_001_src_data),                      //          .data
		.sink0_channel         (cmd_xbar_mux_001_src_channel),                   //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_001_src_startofpacket),             //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_001_src_endofpacket),               //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_001_src_ready),                     //          .ready
		.source0_valid         (burst_adapter_001_source0_valid),                //   source0.valid
		.source0_data          (burst_adapter_001_source0_data),                 //          .data
		.source0_channel       (burst_adapter_001_source0_channel),              //          .channel
		.source0_startofpacket (burst_adapter_001_source0_startofpacket),        //          .startofpacket
		.source0_endofpacket   (burst_adapter_001_source0_endofpacket),          //          .endofpacket
		.source0_ready         (burst_adapter_001_source0_ready)                 //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (81),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (111),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (73),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_002 (
		.clk                   (system_pll_sys_clk_clk),                         //       cr0.clk
		.reset                 (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_002_src_valid),                     //     sink0.valid
		.sink0_data            (cmd_xbar_mux_002_src_data),                      //          .data
		.sink0_channel         (cmd_xbar_mux_002_src_channel),                   //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_002_src_startofpacket),             //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_002_src_endofpacket),               //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_002_src_ready),                     //          .ready
		.source0_valid         (burst_adapter_002_source0_valid),                //   source0.valid
		.source0_data          (burst_adapter_002_source0_data),                 //          .data
		.source0_channel       (burst_adapter_002_source0_channel),              //          .channel
		.source0_startofpacket (burst_adapter_002_source0_startofpacket),        //          .startofpacket
		.source0_endofpacket   (burst_adapter_002_source0_endofpacket),          //          .endofpacket
		.source0_ready         (burst_adapter_002_source0_ready)                 //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (511),
		.BURSTWRAP_CONST_VALUE     (511)
	) burst_adapter_003 (
		.clk                   (system_pll_sys_clk_clk),                         //       cr0.clk
		.reset                 (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_003_src_valid),                     //     sink0.valid
		.sink0_data            (cmd_xbar_mux_003_src_data),                      //          .data
		.sink0_channel         (cmd_xbar_mux_003_src_channel),                   //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_003_src_startofpacket),             //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_003_src_endofpacket),               //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_003_src_ready),                     //          .ready
		.source0_valid         (burst_adapter_003_source0_valid),                //   source0.valid
		.source0_data          (burst_adapter_003_source0_data),                 //          .data
		.source0_channel       (burst_adapter_003_source0_channel),              //          .channel
		.source0_startofpacket (burst_adapter_003_source0_startofpacket),        //          .startofpacket
		.source0_endofpacket   (burst_adapter_003_source0_endofpacket),          //          .endofpacket
		.source0_ready         (burst_adapter_003_source0_ready)                 //          .ready
	);

	mysystem_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux (
		.clk                (system_pll_sys_clk_clk),                                                //        clk.clk
		.reset              (arm_a9_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (limiter_cmd_src_ready),                                                 //       sink.ready
		.sink_channel       (limiter_cmd_src_channel),                                               //           .channel
		.sink_data          (limiter_cmd_src_data),                                                  //           .data
		.sink_startofpacket (limiter_cmd_src_startofpacket),                                         //           .startofpacket
		.sink_endofpacket   (limiter_cmd_src_endofpacket),                                           //           .endofpacket
		.sink_valid         (limiter_cmd_valid_data),                                                // sink_valid.data
		.src0_ready         (cmd_xbar_demux_src0_ready),                                             //       src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),                                             //           .valid
		.src0_data          (cmd_xbar_demux_src0_data),                                              //           .data
		.src0_channel       (cmd_xbar_demux_src0_channel),                                           //           .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket),                                     //           .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket),                                       //           .endofpacket
		.src1_ready         (cmd_xbar_demux_src1_ready),                                             //       src1.ready
		.src1_valid         (cmd_xbar_demux_src1_valid),                                             //           .valid
		.src1_data          (cmd_xbar_demux_src1_data),                                              //           .data
		.src1_channel       (cmd_xbar_demux_src1_channel),                                           //           .channel
		.src1_startofpacket (cmd_xbar_demux_src1_startofpacket),                                     //           .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_src1_endofpacket),                                       //           .endofpacket
		.src2_ready         (cmd_xbar_demux_src2_ready),                                             //       src2.ready
		.src2_valid         (cmd_xbar_demux_src2_valid),                                             //           .valid
		.src2_data          (cmd_xbar_demux_src2_data),                                              //           .data
		.src2_channel       (cmd_xbar_demux_src2_channel),                                           //           .channel
		.src2_startofpacket (cmd_xbar_demux_src2_startofpacket),                                     //           .startofpacket
		.src2_endofpacket   (cmd_xbar_demux_src2_endofpacket)                                        //           .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux_001 (
		.clk                (system_pll_sys_clk_clk),                                                //        clk.clk
		.reset              (arm_a9_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (limiter_001_cmd_src_ready),                                             //       sink.ready
		.sink_channel       (limiter_001_cmd_src_channel),                                           //           .channel
		.sink_data          (limiter_001_cmd_src_data),                                              //           .data
		.sink_startofpacket (limiter_001_cmd_src_startofpacket),                                     //           .startofpacket
		.sink_endofpacket   (limiter_001_cmd_src_endofpacket),                                       //           .endofpacket
		.sink_valid         (limiter_001_cmd_valid_data),                                            // sink_valid.data
		.src0_ready         (cmd_xbar_demux_001_src0_ready),                                         //       src0.ready
		.src0_valid         (cmd_xbar_demux_001_src0_valid),                                         //           .valid
		.src0_data          (cmd_xbar_demux_001_src0_data),                                          //           .data
		.src0_channel       (cmd_xbar_demux_001_src0_channel),                                       //           .channel
		.src0_startofpacket (cmd_xbar_demux_001_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_001_src0_endofpacket),                                   //           .endofpacket
		.src1_ready         (cmd_xbar_demux_001_src1_ready),                                         //       src1.ready
		.src1_valid         (cmd_xbar_demux_001_src1_valid),                                         //           .valid
		.src1_data          (cmd_xbar_demux_001_src1_data),                                          //           .data
		.src1_channel       (cmd_xbar_demux_001_src1_channel),                                       //           .channel
		.src1_startofpacket (cmd_xbar_demux_001_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_001_src1_endofpacket),                                   //           .endofpacket
		.src2_ready         (cmd_xbar_demux_001_src2_ready),                                         //       src2.ready
		.src2_valid         (cmd_xbar_demux_001_src2_valid),                                         //           .valid
		.src2_data          (cmd_xbar_demux_001_src2_data),                                          //           .data
		.src2_channel       (cmd_xbar_demux_001_src2_channel),                                       //           .channel
		.src2_startofpacket (cmd_xbar_demux_001_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket   (cmd_xbar_demux_001_src2_endofpacket)                                    //           .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_demux_002 cmd_xbar_demux_002 (
		.clk                (system_pll_sys_clk_clk),                         //        clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (limiter_002_cmd_src_ready),                      //       sink.ready
		.sink_channel       (limiter_002_cmd_src_channel),                    //           .channel
		.sink_data          (limiter_002_cmd_src_data),                       //           .data
		.sink_startofpacket (limiter_002_cmd_src_startofpacket),              //           .startofpacket
		.sink_endofpacket   (limiter_002_cmd_src_endofpacket),                //           .endofpacket
		.sink_valid         (limiter_002_cmd_valid_data),                     // sink_valid.data
		.src0_ready         (cmd_xbar_demux_002_src0_ready),                  //       src0.ready
		.src0_valid         (cmd_xbar_demux_002_src0_valid),                  //           .valid
		.src0_data          (cmd_xbar_demux_002_src0_data),                   //           .data
		.src0_channel       (cmd_xbar_demux_002_src0_channel),                //           .channel
		.src0_startofpacket (cmd_xbar_demux_002_src0_startofpacket),          //           .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_002_src0_endofpacket),            //           .endofpacket
		.src1_ready         (cmd_xbar_demux_002_src1_ready),                  //       src1.ready
		.src1_valid         (cmd_xbar_demux_002_src1_valid),                  //           .valid
		.src1_data          (cmd_xbar_demux_002_src1_data),                   //           .data
		.src1_channel       (cmd_xbar_demux_002_src1_channel),                //           .channel
		.src1_startofpacket (cmd_xbar_demux_002_src1_startofpacket),          //           .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_002_src1_endofpacket)             //           .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (system_pll_sys_clk_clk),                         //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                         //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                         //          .valid
		.src_data            (cmd_xbar_mux_src_data),                          //          .data
		.src_channel         (cmd_xbar_mux_src_channel),                       //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (width_adapter_src_ready),                        //     sink0.ready
		.sink0_valid         (width_adapter_src_valid),                        //          .valid
		.sink0_channel       (width_adapter_src_channel),                      //          .channel
		.sink0_data          (width_adapter_src_data),                         //          .data
		.sink0_startofpacket (width_adapter_src_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (width_adapter_src_endofpacket),                  //          .endofpacket
		.sink1_ready         (width_adapter_003_src_ready),                    //     sink1.ready
		.sink1_valid         (width_adapter_003_src_valid),                    //          .valid
		.sink1_channel       (width_adapter_003_src_channel),                  //          .channel
		.sink1_data          (width_adapter_003_src_data),                     //          .data
		.sink1_startofpacket (width_adapter_003_src_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (width_adapter_003_src_endofpacket)               //          .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_001 (
		.clk                 (system_pll_sys_clk_clk),                         //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_001_src_ready),                     //       src.ready
		.src_valid           (cmd_xbar_mux_001_src_valid),                     //          .valid
		.src_data            (cmd_xbar_mux_001_src_data),                      //          .data
		.src_channel         (cmd_xbar_mux_001_src_channel),                   //          .channel
		.src_startofpacket   (cmd_xbar_mux_001_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_001_src_endofpacket),               //          .endofpacket
		.sink0_ready         (width_adapter_001_src_ready),                    //     sink0.ready
		.sink0_valid         (width_adapter_001_src_valid),                    //          .valid
		.sink0_channel       (width_adapter_001_src_channel),                  //          .channel
		.sink0_data          (width_adapter_001_src_data),                     //          .data
		.sink0_startofpacket (width_adapter_001_src_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (width_adapter_001_src_endofpacket),              //          .endofpacket
		.sink1_ready         (width_adapter_004_src_ready),                    //     sink1.ready
		.sink1_valid         (width_adapter_004_src_valid),                    //          .valid
		.sink1_channel       (width_adapter_004_src_channel),                  //          .channel
		.sink1_data          (width_adapter_004_src_data),                     //          .data
		.sink1_startofpacket (width_adapter_004_src_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (width_adapter_004_src_endofpacket)               //          .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux_002 cmd_xbar_mux_002 (
		.clk                 (system_pll_sys_clk_clk),                         //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_002_src_ready),                     //       src.ready
		.src_valid           (cmd_xbar_mux_002_src_valid),                     //          .valid
		.src_data            (cmd_xbar_mux_002_src_data),                      //          .data
		.src_channel         (cmd_xbar_mux_002_src_channel),                   //          .channel
		.src_startofpacket   (cmd_xbar_mux_002_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_002_src_endofpacket),               //          .endofpacket
		.sink0_ready         (width_adapter_002_src_ready),                    //     sink0.ready
		.sink0_valid         (width_adapter_002_src_valid),                    //          .valid
		.sink0_channel       (width_adapter_002_src_channel),                  //          .channel
		.sink0_data          (width_adapter_002_src_data),                     //          .data
		.sink0_startofpacket (width_adapter_002_src_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (width_adapter_002_src_endofpacket),              //          .endofpacket
		.sink1_ready         (width_adapter_005_src_ready),                    //     sink1.ready
		.sink1_valid         (width_adapter_005_src_valid),                    //          .valid
		.sink1_channel       (width_adapter_005_src_channel),                  //          .channel
		.sink1_data          (width_adapter_005_src_data),                     //          .data
		.sink1_startofpacket (width_adapter_005_src_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (width_adapter_005_src_endofpacket),              //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_002_src0_ready),                  //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_002_src0_valid),                  //          .valid
		.sink2_channel       (cmd_xbar_demux_002_src0_channel),                //          .channel
		.sink2_data          (cmd_xbar_demux_002_src0_data),                   //          .data
		.sink2_startofpacket (cmd_xbar_demux_002_src0_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_002_src0_endofpacket)             //          .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux_003 cmd_xbar_mux_003 (
		.clk                 (system_pll_sys_clk_clk),                         //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_003_src_ready),                     //       src.ready
		.src_valid           (cmd_xbar_mux_003_src_valid),                     //          .valid
		.src_data            (cmd_xbar_mux_003_src_data),                      //          .data
		.src_channel         (cmd_xbar_mux_003_src_channel),                   //          .channel
		.src_startofpacket   (cmd_xbar_mux_003_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_003_src_endofpacket),               //          .endofpacket
		.sink0_ready         (width_adapter_006_src_ready),                    //     sink0.ready
		.sink0_valid         (width_adapter_006_src_valid),                    //          .valid
		.sink0_channel       (width_adapter_006_src_channel),                  //          .channel
		.sink0_data          (width_adapter_006_src_data),                     //          .data
		.sink0_startofpacket (width_adapter_006_src_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (width_adapter_006_src_endofpacket)               //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux (
		.clk                (system_pll_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_src_ready),                            //      sink.ready
		.sink_channel       (id_router_src_channel),                          //          .channel
		.sink_data          (id_router_src_data),                             //          .data
		.sink_startofpacket (id_router_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (id_router_src_endofpacket),                      //          .endofpacket
		.sink_valid         (id_router_src_valid),                            //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),                      //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),                       //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_xbar_demux_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_xbar_demux_src1_valid),                      //          .valid
		.src1_data          (rsp_xbar_demux_src1_data),                       //          .data
		.src1_channel       (rsp_xbar_demux_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_xbar_demux_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_src1_endofpacket)                 //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_001 (
		.clk                (system_pll_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_001_src_ready),                        //      sink.ready
		.sink_channel       (id_router_001_src_channel),                      //          .channel
		.sink_data          (id_router_001_src_data),                         //          .data
		.sink_startofpacket (id_router_001_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (id_router_001_src_endofpacket),                  //          .endofpacket
		.sink_valid         (id_router_001_src_valid),                        //          .valid
		.src0_ready         (rsp_xbar_demux_001_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_xbar_demux_001_src0_valid),                  //          .valid
		.src0_data          (rsp_xbar_demux_001_src0_data),                   //          .data
		.src0_channel       (rsp_xbar_demux_001_src0_channel),                //          .channel
		.src0_startofpacket (rsp_xbar_demux_001_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),            //          .endofpacket
		.src1_ready         (rsp_xbar_demux_001_src1_ready),                  //      src1.ready
		.src1_valid         (rsp_xbar_demux_001_src1_valid),                  //          .valid
		.src1_data          (rsp_xbar_demux_001_src1_data),                   //          .data
		.src1_channel       (rsp_xbar_demux_001_src1_channel),                //          .channel
		.src1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),          //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket)             //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux_002 rsp_xbar_demux_002 (
		.clk                (system_pll_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_002_src_ready),                        //      sink.ready
		.sink_channel       (id_router_002_src_channel),                      //          .channel
		.sink_data          (id_router_002_src_data),                         //          .data
		.sink_startofpacket (id_router_002_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (id_router_002_src_endofpacket),                  //          .endofpacket
		.sink_valid         (id_router_002_src_valid),                        //          .valid
		.src0_ready         (rsp_xbar_demux_002_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_xbar_demux_002_src0_valid),                  //          .valid
		.src0_data          (rsp_xbar_demux_002_src0_data),                   //          .data
		.src0_channel       (rsp_xbar_demux_002_src0_channel),                //          .channel
		.src0_startofpacket (rsp_xbar_demux_002_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_002_src0_endofpacket),            //          .endofpacket
		.src1_ready         (rsp_xbar_demux_002_src1_ready),                  //      src1.ready
		.src1_valid         (rsp_xbar_demux_002_src1_valid),                  //          .valid
		.src1_data          (rsp_xbar_demux_002_src1_data),                   //          .data
		.src1_channel       (rsp_xbar_demux_002_src1_channel),                //          .channel
		.src1_startofpacket (rsp_xbar_demux_002_src1_startofpacket),          //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_002_src1_endofpacket),            //          .endofpacket
		.src2_ready         (rsp_xbar_demux_002_src2_ready),                  //      src2.ready
		.src2_valid         (rsp_xbar_demux_002_src2_valid),                  //          .valid
		.src2_data          (rsp_xbar_demux_002_src2_data),                   //          .data
		.src2_channel       (rsp_xbar_demux_002_src2_channel),                //          .channel
		.src2_startofpacket (rsp_xbar_demux_002_src2_startofpacket),          //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_002_src2_endofpacket)             //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux_003 rsp_xbar_demux_003 (
		.clk                (system_pll_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_003_src_ready),                        //      sink.ready
		.sink_channel       (id_router_003_src_channel),                      //          .channel
		.sink_data          (id_router_003_src_data),                         //          .data
		.sink_startofpacket (id_router_003_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (id_router_003_src_endofpacket),                  //          .endofpacket
		.sink_valid         (id_router_003_src_valid),                        //          .valid
		.src0_ready         (rsp_xbar_demux_003_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_xbar_demux_003_src0_valid),                  //          .valid
		.src0_data          (rsp_xbar_demux_003_src0_data),                   //          .data
		.src0_channel       (rsp_xbar_demux_003_src0_channel),                //          .channel
		.src0_startofpacket (rsp_xbar_demux_003_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_003_src0_endofpacket)             //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux (
		.clk                 (system_pll_sys_clk_clk),                                                //       clk.clk
		.reset               (arm_a9_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_src_ready),                                                //       src.ready
		.src_valid           (rsp_xbar_mux_src_valid),                                                //          .valid
		.src_data            (rsp_xbar_mux_src_data),                                                 //          .data
		.src_channel         (rsp_xbar_mux_src_channel),                                              //          .channel
		.src_startofpacket   (rsp_xbar_mux_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (width_adapter_007_src_ready),                                           //     sink0.ready
		.sink0_valid         (width_adapter_007_src_valid),                                           //          .valid
		.sink0_channel       (width_adapter_007_src_channel),                                         //          .channel
		.sink0_data          (width_adapter_007_src_data),                                            //          .data
		.sink0_startofpacket (width_adapter_007_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (width_adapter_007_src_endofpacket),                                     //          .endofpacket
		.sink1_ready         (width_adapter_009_src_ready),                                           //     sink1.ready
		.sink1_valid         (width_adapter_009_src_valid),                                           //          .valid
		.sink1_channel       (width_adapter_009_src_channel),                                         //          .channel
		.sink1_data          (width_adapter_009_src_data),                                            //          .data
		.sink1_startofpacket (width_adapter_009_src_startofpacket),                                   //          .startofpacket
		.sink1_endofpacket   (width_adapter_009_src_endofpacket),                                     //          .endofpacket
		.sink2_ready         (width_adapter_011_src_ready),                                           //     sink2.ready
		.sink2_valid         (width_adapter_011_src_valid),                                           //          .valid
		.sink2_channel       (width_adapter_011_src_channel),                                         //          .channel
		.sink2_data          (width_adapter_011_src_data),                                            //          .data
		.sink2_startofpacket (width_adapter_011_src_startofpacket),                                   //          .startofpacket
		.sink2_endofpacket   (width_adapter_011_src_endofpacket)                                      //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux_001 (
		.clk                 (system_pll_sys_clk_clk),                                                //       clk.clk
		.reset               (arm_a9_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_001_src_ready),                                            //       src.ready
		.src_valid           (rsp_xbar_mux_001_src_valid),                                            //          .valid
		.src_data            (rsp_xbar_mux_001_src_data),                                             //          .data
		.src_channel         (rsp_xbar_mux_001_src_channel),                                          //          .channel
		.src_startofpacket   (rsp_xbar_mux_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_001_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (width_adapter_008_src_ready),                                           //     sink0.ready
		.sink0_valid         (width_adapter_008_src_valid),                                           //          .valid
		.sink0_channel       (width_adapter_008_src_channel),                                         //          .channel
		.sink0_data          (width_adapter_008_src_data),                                            //          .data
		.sink0_startofpacket (width_adapter_008_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (width_adapter_008_src_endofpacket),                                     //          .endofpacket
		.sink1_ready         (width_adapter_010_src_ready),                                           //     sink1.ready
		.sink1_valid         (width_adapter_010_src_valid),                                           //          .valid
		.sink1_channel       (width_adapter_010_src_channel),                                         //          .channel
		.sink1_data          (width_adapter_010_src_data),                                            //          .data
		.sink1_startofpacket (width_adapter_010_src_startofpacket),                                   //          .startofpacket
		.sink1_endofpacket   (width_adapter_010_src_endofpacket),                                     //          .endofpacket
		.sink2_ready         (width_adapter_012_src_ready),                                           //     sink2.ready
		.sink2_valid         (width_adapter_012_src_valid),                                           //          .valid
		.sink2_channel       (width_adapter_012_src_channel),                                         //          .channel
		.sink2_data          (width_adapter_012_src_data),                                            //          .data
		.sink2_startofpacket (width_adapter_012_src_startofpacket),                                   //          .startofpacket
		.sink2_endofpacket   (width_adapter_012_src_endofpacket)                                      //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_mux_002 rsp_xbar_mux_002 (
		.clk                 (system_pll_sys_clk_clk),                         //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_002_src_ready),                     //       src.ready
		.src_valid           (rsp_xbar_mux_002_src_valid),                     //          .valid
		.src_data            (rsp_xbar_mux_002_src_data),                      //          .data
		.src_channel         (rsp_xbar_mux_002_src_channel),                   //          .channel
		.src_startofpacket   (rsp_xbar_mux_002_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_002_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_002_src2_ready),                  //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_002_src2_valid),                  //          .valid
		.sink0_channel       (rsp_xbar_demux_002_src2_channel),                //          .channel
		.sink0_data          (rsp_xbar_demux_002_src2_data),                   //          .data
		.sink0_startofpacket (rsp_xbar_demux_002_src2_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_002_src2_endofpacket),            //          .endofpacket
		.sink1_ready         (width_adapter_013_src_ready),                    //     sink1.ready
		.sink1_valid         (width_adapter_013_src_valid),                    //          .valid
		.sink1_channel       (width_adapter_013_src_channel),                  //          .channel
		.sink1_data          (width_adapter_013_src_data),                     //          .data
		.sink1_startofpacket (width_adapter_013_src_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (width_adapter_013_src_endofpacket)               //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (233),
		.IN_PKT_RESPONSE_STATUS_L      (232),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (234),
		.IN_PKT_ORI_BURST_SIZE_H       (236),
		.IN_ST_DATA_W                  (237),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0)
	) width_adapter (
		.clk                  (system_pll_sys_clk_clk),                                                //       clk.clk
		.reset                (arm_a9_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_demux_src0_valid),                                             //      sink.valid
		.in_channel           (cmd_xbar_demux_src0_channel),                                           //          .channel
		.in_startofpacket     (cmd_xbar_demux_src0_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (cmd_xbar_demux_src0_endofpacket),                                       //          .endofpacket
		.in_ready             (cmd_xbar_demux_src0_ready),                                             //          .ready
		.in_data              (cmd_xbar_demux_src0_data),                                              //          .data
		.out_endofpacket      (width_adapter_src_endofpacket),                                         //       src.endofpacket
		.out_data             (width_adapter_src_data),                                                //          .data
		.out_channel          (width_adapter_src_channel),                                             //          .channel
		.out_valid            (width_adapter_src_valid),                                               //          .valid
		.out_ready            (width_adapter_src_ready),                                               //          .ready
		.out_startofpacket    (width_adapter_src_startofpacket),                                       //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (233),
		.IN_PKT_RESPONSE_STATUS_L      (232),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (234),
		.IN_PKT_ORI_BURST_SIZE_H       (236),
		.IN_ST_DATA_W                  (237),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (55),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (98),
		.OUT_PKT_RESPONSE_STATUS_L     (97),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (99),
		.OUT_PKT_ORI_BURST_SIZE_H      (101),
		.OUT_ST_DATA_W                 (102),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0)
	) width_adapter_001 (
		.clk                  (system_pll_sys_clk_clk),                                                //       clk.clk
		.reset                (arm_a9_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_demux_src1_valid),                                             //      sink.valid
		.in_channel           (cmd_xbar_demux_src1_channel),                                           //          .channel
		.in_startofpacket     (cmd_xbar_demux_src1_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (cmd_xbar_demux_src1_endofpacket),                                       //          .endofpacket
		.in_ready             (cmd_xbar_demux_src1_ready),                                             //          .ready
		.in_data              (cmd_xbar_demux_src1_data),                                              //          .data
		.out_endofpacket      (width_adapter_001_src_endofpacket),                                     //       src.endofpacket
		.out_data             (width_adapter_001_src_data),                                            //          .data
		.out_channel          (width_adapter_001_src_channel),                                         //          .channel
		.out_valid            (width_adapter_001_src_valid),                                           //          .valid
		.out_ready            (width_adapter_001_src_ready),                                           //          .ready
		.out_startofpacket    (width_adapter_001_src_startofpacket),                                   //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (233),
		.IN_PKT_RESPONSE_STATUS_L      (232),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (234),
		.IN_PKT_ORI_BURST_SIZE_H       (236),
		.IN_ST_DATA_W                  (237),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (107),
		.OUT_PKT_RESPONSE_STATUS_L     (106),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (108),
		.OUT_PKT_ORI_BURST_SIZE_H      (110),
		.OUT_ST_DATA_W                 (111),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0)
	) width_adapter_002 (
		.clk                  (system_pll_sys_clk_clk),                                                //       clk.clk
		.reset                (arm_a9_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_demux_src2_valid),                                             //      sink.valid
		.in_channel           (cmd_xbar_demux_src2_channel),                                           //          .channel
		.in_startofpacket     (cmd_xbar_demux_src2_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (cmd_xbar_demux_src2_endofpacket),                                       //          .endofpacket
		.in_ready             (cmd_xbar_demux_src2_ready),                                             //          .ready
		.in_data              (cmd_xbar_demux_src2_data),                                              //          .data
		.out_endofpacket      (width_adapter_002_src_endofpacket),                                     //       src.endofpacket
		.out_data             (width_adapter_002_src_data),                                            //          .data
		.out_channel          (width_adapter_002_src_channel),                                         //          .channel
		.out_valid            (width_adapter_002_src_valid),                                           //          .valid
		.out_ready            (width_adapter_002_src_ready),                                           //          .ready
		.out_startofpacket    (width_adapter_002_src_startofpacket),                                   //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (233),
		.IN_PKT_RESPONSE_STATUS_L      (232),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (234),
		.IN_PKT_ORI_BURST_SIZE_H       (236),
		.IN_ST_DATA_W                  (237),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0)
	) width_adapter_003 (
		.clk                  (system_pll_sys_clk_clk),                                                //       clk.clk
		.reset                (arm_a9_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_demux_001_src0_valid),                                         //      sink.valid
		.in_channel           (cmd_xbar_demux_001_src0_channel),                                       //          .channel
		.in_startofpacket     (cmd_xbar_demux_001_src0_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (cmd_xbar_demux_001_src0_endofpacket),                                   //          .endofpacket
		.in_ready             (cmd_xbar_demux_001_src0_ready),                                         //          .ready
		.in_data              (cmd_xbar_demux_001_src0_data),                                          //          .data
		.out_endofpacket      (width_adapter_003_src_endofpacket),                                     //       src.endofpacket
		.out_data             (width_adapter_003_src_data),                                            //          .data
		.out_channel          (width_adapter_003_src_channel),                                         //          .channel
		.out_valid            (width_adapter_003_src_valid),                                           //          .valid
		.out_ready            (width_adapter_003_src_ready),                                           //          .ready
		.out_startofpacket    (width_adapter_003_src_startofpacket),                                   //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (233),
		.IN_PKT_RESPONSE_STATUS_L      (232),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (234),
		.IN_PKT_ORI_BURST_SIZE_H       (236),
		.IN_ST_DATA_W                  (237),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (55),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (98),
		.OUT_PKT_RESPONSE_STATUS_L     (97),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (99),
		.OUT_PKT_ORI_BURST_SIZE_H      (101),
		.OUT_ST_DATA_W                 (102),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0)
	) width_adapter_004 (
		.clk                  (system_pll_sys_clk_clk),                                                //       clk.clk
		.reset                (arm_a9_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_demux_001_src1_valid),                                         //      sink.valid
		.in_channel           (cmd_xbar_demux_001_src1_channel),                                       //          .channel
		.in_startofpacket     (cmd_xbar_demux_001_src1_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (cmd_xbar_demux_001_src1_endofpacket),                                   //          .endofpacket
		.in_ready             (cmd_xbar_demux_001_src1_ready),                                         //          .ready
		.in_data              (cmd_xbar_demux_001_src1_data),                                          //          .data
		.out_endofpacket      (width_adapter_004_src_endofpacket),                                     //       src.endofpacket
		.out_data             (width_adapter_004_src_data),                                            //          .data
		.out_channel          (width_adapter_004_src_channel),                                         //          .channel
		.out_valid            (width_adapter_004_src_valid),                                           //          .valid
		.out_ready            (width_adapter_004_src_ready),                                           //          .ready
		.out_startofpacket    (width_adapter_004_src_startofpacket),                                   //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (233),
		.IN_PKT_RESPONSE_STATUS_L      (232),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (234),
		.IN_PKT_ORI_BURST_SIZE_H       (236),
		.IN_ST_DATA_W                  (237),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (107),
		.OUT_PKT_RESPONSE_STATUS_L     (106),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (108),
		.OUT_PKT_ORI_BURST_SIZE_H      (110),
		.OUT_ST_DATA_W                 (111),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0)
	) width_adapter_005 (
		.clk                  (system_pll_sys_clk_clk),                                                //       clk.clk
		.reset                (arm_a9_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_demux_001_src2_valid),                                         //      sink.valid
		.in_channel           (cmd_xbar_demux_001_src2_channel),                                       //          .channel
		.in_startofpacket     (cmd_xbar_demux_001_src2_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (cmd_xbar_demux_001_src2_endofpacket),                                   //          .endofpacket
		.in_ready             (cmd_xbar_demux_001_src2_ready),                                         //          .ready
		.in_data              (cmd_xbar_demux_001_src2_data),                                          //          .data
		.out_endofpacket      (width_adapter_005_src_endofpacket),                                     //       src.endofpacket
		.out_data             (width_adapter_005_src_data),                                            //          .data
		.out_channel          (width_adapter_005_src_channel),                                         //          .channel
		.out_valid            (width_adapter_005_src_valid),                                           //          .valid
		.out_ready            (width_adapter_005_src_ready),                                           //          .ready
		.out_startofpacket    (width_adapter_005_src_startofpacket),                                   //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (107),
		.IN_PKT_RESPONSE_STATUS_L      (106),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (108),
		.IN_PKT_ORI_BURST_SIZE_H       (110),
		.IN_ST_DATA_W                  (111),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (129),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0)
	) width_adapter_006 (
		.clk                  (system_pll_sys_clk_clk),                         //       clk.clk
		.reset                (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_demux_002_src1_valid),                  //      sink.valid
		.in_channel           (cmd_xbar_demux_002_src1_channel),                //          .channel
		.in_startofpacket     (cmd_xbar_demux_002_src1_startofpacket),          //          .startofpacket
		.in_endofpacket       (cmd_xbar_demux_002_src1_endofpacket),            //          .endofpacket
		.in_ready             (cmd_xbar_demux_002_src1_ready),                  //          .ready
		.in_data              (cmd_xbar_demux_002_src1_data),                   //          .data
		.out_endofpacket      (width_adapter_006_src_endofpacket),              //       src.endofpacket
		.out_data             (width_adapter_006_src_data),                     //          .data
		.out_channel          (width_adapter_006_src_channel),                  //          .channel
		.out_valid            (width_adapter_006_src_valid),                    //          .valid
		.out_ready            (width_adapter_006_src_ready),                    //          .ready
		.out_startofpacket    (width_adapter_006_src_startofpacket),            //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (233),
		.OUT_PKT_RESPONSE_STATUS_L     (232),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (234),
		.OUT_PKT_ORI_BURST_SIZE_H      (236),
		.OUT_ST_DATA_W                 (237),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1)
	) width_adapter_007 (
		.clk                  (system_pll_sys_clk_clk),                         //       clk.clk
		.reset                (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (rsp_xbar_demux_src0_valid),                      //      sink.valid
		.in_channel           (rsp_xbar_demux_src0_channel),                    //          .channel
		.in_startofpacket     (rsp_xbar_demux_src0_startofpacket),              //          .startofpacket
		.in_endofpacket       (rsp_xbar_demux_src0_endofpacket),                //          .endofpacket
		.in_ready             (rsp_xbar_demux_src0_ready),                      //          .ready
		.in_data              (rsp_xbar_demux_src0_data),                       //          .data
		.out_endofpacket      (width_adapter_007_src_endofpacket),              //       src.endofpacket
		.out_data             (width_adapter_007_src_data),                     //          .data
		.out_channel          (width_adapter_007_src_channel),                  //          .channel
		.out_valid            (width_adapter_007_src_valid),                    //          .valid
		.out_ready            (width_adapter_007_src_ready),                    //          .ready
		.out_startofpacket    (width_adapter_007_src_startofpacket),            //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (233),
		.OUT_PKT_RESPONSE_STATUS_L     (232),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (234),
		.OUT_PKT_ORI_BURST_SIZE_H      (236),
		.OUT_ST_DATA_W                 (237),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1)
	) width_adapter_008 (
		.clk                  (system_pll_sys_clk_clk),                         //       clk.clk
		.reset                (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (rsp_xbar_demux_src1_valid),                      //      sink.valid
		.in_channel           (rsp_xbar_demux_src1_channel),                    //          .channel
		.in_startofpacket     (rsp_xbar_demux_src1_startofpacket),              //          .startofpacket
		.in_endofpacket       (rsp_xbar_demux_src1_endofpacket),                //          .endofpacket
		.in_ready             (rsp_xbar_demux_src1_ready),                      //          .ready
		.in_data              (rsp_xbar_demux_src1_data),                       //          .data
		.out_endofpacket      (width_adapter_008_src_endofpacket),              //       src.endofpacket
		.out_data             (width_adapter_008_src_data),                     //          .data
		.out_channel          (width_adapter_008_src_channel),                  //          .channel
		.out_valid            (width_adapter_008_src_valid),                    //          .valid
		.out_ready            (width_adapter_008_src_ready),                    //          .ready
		.out_startofpacket    (width_adapter_008_src_startofpacket),            //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (55),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (56),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (98),
		.IN_PKT_RESPONSE_STATUS_L      (97),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (99),
		.IN_PKT_ORI_BURST_SIZE_H       (101),
		.IN_ST_DATA_W                  (102),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (233),
		.OUT_PKT_RESPONSE_STATUS_L     (232),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (234),
		.OUT_PKT_ORI_BURST_SIZE_H      (236),
		.OUT_ST_DATA_W                 (237),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1)
	) width_adapter_009 (
		.clk                  (system_pll_sys_clk_clk),                         //       clk.clk
		.reset                (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (rsp_xbar_demux_001_src0_valid),                  //      sink.valid
		.in_channel           (rsp_xbar_demux_001_src0_channel),                //          .channel
		.in_startofpacket     (rsp_xbar_demux_001_src0_startofpacket),          //          .startofpacket
		.in_endofpacket       (rsp_xbar_demux_001_src0_endofpacket),            //          .endofpacket
		.in_ready             (rsp_xbar_demux_001_src0_ready),                  //          .ready
		.in_data              (rsp_xbar_demux_001_src0_data),                   //          .data
		.out_endofpacket      (width_adapter_009_src_endofpacket),              //       src.endofpacket
		.out_data             (width_adapter_009_src_data),                     //          .data
		.out_channel          (width_adapter_009_src_channel),                  //          .channel
		.out_valid            (width_adapter_009_src_valid),                    //          .valid
		.out_ready            (width_adapter_009_src_ready),                    //          .ready
		.out_startofpacket    (width_adapter_009_src_startofpacket),            //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (55),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (56),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (98),
		.IN_PKT_RESPONSE_STATUS_L      (97),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (99),
		.IN_PKT_ORI_BURST_SIZE_H       (101),
		.IN_ST_DATA_W                  (102),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (233),
		.OUT_PKT_RESPONSE_STATUS_L     (232),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (234),
		.OUT_PKT_ORI_BURST_SIZE_H      (236),
		.OUT_ST_DATA_W                 (237),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1)
	) width_adapter_010 (
		.clk                  (system_pll_sys_clk_clk),                         //       clk.clk
		.reset                (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (rsp_xbar_demux_001_src1_valid),                  //      sink.valid
		.in_channel           (rsp_xbar_demux_001_src1_channel),                //          .channel
		.in_startofpacket     (rsp_xbar_demux_001_src1_startofpacket),          //          .startofpacket
		.in_endofpacket       (rsp_xbar_demux_001_src1_endofpacket),            //          .endofpacket
		.in_ready             (rsp_xbar_demux_001_src1_ready),                  //          .ready
		.in_data              (rsp_xbar_demux_001_src1_data),                   //          .data
		.out_endofpacket      (width_adapter_010_src_endofpacket),              //       src.endofpacket
		.out_data             (width_adapter_010_src_data),                     //          .data
		.out_channel          (width_adapter_010_src_channel),                  //          .channel
		.out_valid            (width_adapter_010_src_valid),                    //          .valid
		.out_ready            (width_adapter_010_src_ready),                    //          .ready
		.out_startofpacket    (width_adapter_010_src_startofpacket),            //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (107),
		.IN_PKT_RESPONSE_STATUS_L      (106),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (108),
		.IN_PKT_ORI_BURST_SIZE_H       (110),
		.IN_ST_DATA_W                  (111),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (233),
		.OUT_PKT_RESPONSE_STATUS_L     (232),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (234),
		.OUT_PKT_ORI_BURST_SIZE_H      (236),
		.OUT_ST_DATA_W                 (237),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1)
	) width_adapter_011 (
		.clk                  (system_pll_sys_clk_clk),                         //       clk.clk
		.reset                (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (rsp_xbar_demux_002_src0_valid),                  //      sink.valid
		.in_channel           (rsp_xbar_demux_002_src0_channel),                //          .channel
		.in_startofpacket     (rsp_xbar_demux_002_src0_startofpacket),          //          .startofpacket
		.in_endofpacket       (rsp_xbar_demux_002_src0_endofpacket),            //          .endofpacket
		.in_ready             (rsp_xbar_demux_002_src0_ready),                  //          .ready
		.in_data              (rsp_xbar_demux_002_src0_data),                   //          .data
		.out_endofpacket      (width_adapter_011_src_endofpacket),              //       src.endofpacket
		.out_data             (width_adapter_011_src_data),                     //          .data
		.out_channel          (width_adapter_011_src_channel),                  //          .channel
		.out_valid            (width_adapter_011_src_valid),                    //          .valid
		.out_ready            (width_adapter_011_src_ready),                    //          .ready
		.out_startofpacket    (width_adapter_011_src_startofpacket),            //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (107),
		.IN_PKT_RESPONSE_STATUS_L      (106),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (108),
		.IN_PKT_ORI_BURST_SIZE_H       (110),
		.IN_ST_DATA_W                  (111),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (233),
		.OUT_PKT_RESPONSE_STATUS_L     (232),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (234),
		.OUT_PKT_ORI_BURST_SIZE_H      (236),
		.OUT_ST_DATA_W                 (237),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1)
	) width_adapter_012 (
		.clk                  (system_pll_sys_clk_clk),                         //       clk.clk
		.reset                (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (rsp_xbar_demux_002_src1_valid),                  //      sink.valid
		.in_channel           (rsp_xbar_demux_002_src1_channel),                //          .channel
		.in_startofpacket     (rsp_xbar_demux_002_src1_startofpacket),          //          .startofpacket
		.in_endofpacket       (rsp_xbar_demux_002_src1_endofpacket),            //          .endofpacket
		.in_ready             (rsp_xbar_demux_002_src1_ready),                  //          .ready
		.in_data              (rsp_xbar_demux_002_src1_data),                   //          .data
		.out_endofpacket      (width_adapter_012_src_endofpacket),              //       src.endofpacket
		.out_data             (width_adapter_012_src_data),                     //          .data
		.out_channel          (width_adapter_012_src_channel),                  //          .channel
		.out_valid            (width_adapter_012_src_valid),                    //          .valid
		.out_ready            (width_adapter_012_src_ready),                    //          .ready
		.out_startofpacket    (width_adapter_012_src_startofpacket),            //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (129),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (107),
		.OUT_PKT_RESPONSE_STATUS_L     (106),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (108),
		.OUT_PKT_ORI_BURST_SIZE_H      (110),
		.OUT_ST_DATA_W                 (111),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1)
	) width_adapter_013 (
		.clk                  (system_pll_sys_clk_clk),                         //       clk.clk
		.reset                (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (rsp_xbar_demux_003_src0_valid),                  //      sink.valid
		.in_channel           (rsp_xbar_demux_003_src0_channel),                //          .channel
		.in_startofpacket     (rsp_xbar_demux_003_src0_startofpacket),          //          .startofpacket
		.in_endofpacket       (rsp_xbar_demux_003_src0_endofpacket),            //          .endofpacket
		.in_ready             (rsp_xbar_demux_003_src0_ready),                  //          .ready
		.in_data              (rsp_xbar_demux_003_src0_data),                   //          .data
		.out_endofpacket      (width_adapter_013_src_endofpacket),              //       src.endofpacket
		.out_data             (width_adapter_013_src_data),                     //          .data
		.out_channel          (width_adapter_013_src_channel),                  //          .channel
		.out_valid            (width_adapter_013_src_valid),                    //          .valid
		.out_ready            (width_adapter_013_src_ready),                    //          .ready
		.out_startofpacket    (width_adapter_013_src_startofpacket),            //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

endmodule
